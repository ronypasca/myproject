@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model FPTNegotiationRoundVM
@{
    var X = Html.X();
    var iBodyPadding = 10;
    var sToolbarPaddingSpec = "20 0 30 0";
    var sPanelLeftPaddingSpec = "10 0 10 10";
    var sPanelRightPaddingSpec = "10 10 10 10";
    var iLabelWidth = 175;
    var iFieldWidth = 420;

    decimal pricemargintop = (decimal)ViewData["PriceMarginData"]; 

    var FPTID = ViewData["FPTIDData"].ToString();
    var RoundID = ViewData["RoundIDData"].ToString();
    var SubItemLevel = (int)ViewData["SubItemLevelData"];
    var VendorName= ViewData["VendorNameData"].ToString();
    var FPTName = ViewData["FPTNameData"].ToString();
    var TimeRemaining = ViewData["TimeRemaining"].ToString();


    Button.Builder btnList = global_asax.Button(Buttons.ButtonList, "", null, General.EnumDesc(Params.Home), true, false, false, null, null, null, "App.grdFPTNegotiationRound.store.reload()");
    Button.Builder btnSubmit = global_asax.Button(Buttons.ButtonSelect, "", "Submit All", General.EnumDesc(Params.Home), true, false, false, null, null,  null);
}



<script>
    var viewReady = function(e){
        var BPTree = Ext.getCmp(e.id);
        BPTree.height = $(window).height() - BPTree.getY() - (BPTree.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height();
        
    };
    var changechildvalue = function (e){
        for (var i = 0; i < e.childNodes.length; i++) {
            e.childNodes[i].set("bid",0);
            changechildvalue(e.childNodes[i]);
        }
        
    };
    var calculateTotal = function (b, e) {
        var node=e.parentNode;
        while (node!=null) {
            var _total=0;
            for (var i = 0; i < node.childNodes.length; i++) {
                _total+=node.childNodes[i].get("bid");
            }
            if (_total==0) {
                node.set("bid",null);
            }else
                node.set("bid",_total);
            node=node.parentNode;
        }

        var grandtotal = 0;
        var BPTree = Ext.getCmp(b.grid.id);
        var GrandTotalID = "";
        var FeeID = "";
        var AfterFeeID = "";
        for (var i = 0; i < BPTree.store.data.items.length; i++) {
            var node = BPTree.store.data.items[i];
            
            if (node.data.sequencelevel == 7777){
                GrandTotalID = node.id;
            }
            if (node.data.sequencelevel == 8888){
                FeeID = node.id;
            }
            if (node.data.sequencelevel == 9999){
                AfterFeeID = node.id;
            }
            if (node.data.id != '######' &&  node.data.sequencelevel == 1) {
                grandtotal += node.get("bid");
            }
        }
        var Fee = BPTree.store.getNodeById(FeeID).get('bid');
        BPTree.store.getNodeById(GrandTotalID).set("bid",grandtotal);
        BPTree.store.getNodeById(AfterFeeID).set("bid", grandtotal + (grandtotal * (Fee /100)));
    };
    var editBidStructure = function (a,b) {
        
        if(b.originalValue == b.value) return;
        if (b.record.data.sequencelevel == 8888 && b.value > 100){
            b.record.set('bid', b.originalValue);
            return;
        }       
        var BPTree = Ext.getCmp(b.grid.id);
        var grandtotal = 0;
        var Fee = 0;
        var GrandTotalID = "";
        var FeeID = "";
        var AfterFeeID = "";
        for (var i = 0; i < BPTree.store.data.items.length; i++) {
            var node = BPTree.store.data.items[i];
            
            if (node.data.sequencelevel == 7777){
                GrandTotalID = node.id;
            }
            if (node.data.sequencelevel == 8888){
                FeeID = node.id;
            }
            if (node.data.sequencelevel == 9999){
                AfterFeeID = node.id;
            }
        }

        /**After Fee**/
        if (b.record.data.sequencelevel == 9999) {
            debugger;
            for (var i = 0; i < BPTree.store.data.items.length; i++) {
                var node = BPTree.store.data.items[i];
                if (node.data.id != '######' &&  node.data.sequencelevel != 7777 && node.data.sequencelevel != 8888 && node.data.sequencelevel != 9999) {
                    node.set("bid",0);
                }
            }
            Fee = BPTree.store.getNodeById(FeeID).get('bid');
            BPTree.store.getNodeById(GrandTotalID).set("bid", b.value / (1 + (Fee / 100)) );
            BPTree.store.commitChanges();
        }
        /**Fee**/
        else if(b.record.data.sequencelevel == 8888){
            debugger;
            grandtotal = BPTree.store.getNodeById(GrandTotalID).data.bid;
            BPTree.store.getNodeById(AfterFeeID).set("bid", grandtotal + (grandtotal * (b.value /100)));
        }
        else{
            changechildvalue(b.record);
            calculateTotal(a, b.record);
        }
        
    };
    
    var beforeEditBidStructure = function (a, b, c) {
        
        if (b.record.data.sequencelevel == 8888 || b.record.data.sequencelevel == 9999 || (b.record.data.sequencelevel <= @SubItemLevel)) {
            return true;
        }
        
        return false;
    };

    var ExColHandler = function (e) {
        var BPTree = Ext.getCmp(e.tag);
        if (e.text == '@General.EnumDesc(Buttons.ButtonExpand)') {
            BPTree.expandAll();
            e.setText('@General.EnumDesc(Buttons.ButtonCollapse)');
        }
        else {
            BPTree.collapseAll();
            e.setText('@General.EnumDesc(Buttons.ButtonExpand)');
        }

        return;
    };

    var getListStructure = function (TreePanelID) {

        var BPTree = Ext.getCmp(TreePanelID);
        var data = [];

        for (var i = 0; i < BPTree.store.data.items.length; i++) {
            var nodeData = BPTree.store.data.items[i].data;
            if (nodeData.id != '######') {
                if (nodeData.bid != undefined && nodeData.bid != 0) {
                    data.push(nodeData);
                }

            }
        }
        return data;
    };
    var GetLeafData = function (data, node) {

        if (node.childNodes.length == 0) {
            data.push(node.data);
        } else {
            for (var i = 0; i < node.childNodes.length; i++) {
                data = GetLeafData(data, node.childNodes[i]);
            }
        }
        return data;
    };
    var renderTreeColumn = function(a,b,c,d,e,f,g){
        var bvalue = b.record.data.bpvalue + (b.record.data.bpvalue * @pricemargintop);
        if(a > bvalue && c.data.sequencelevel != 8888){
            b.style = "color:red;";
        }
        return Ext.util.Format.number(a, integerNumberFormat);
    };

    var onSubmit = function(a,b,c,d,e){
       
        var BPTree = Ext.getCmp(d.treeID);
        BPTree.store.commitChanges();
    };

</script>

@(
    X.Panel()
    .ID("PBidForm")
    .Frame(true)
    .Items(
        X.Container()
        .Layout(LayoutType.Column)
        .Items(
            X.Panel()
            .Cls("fullOnSmall")
            .ColumnWidth(0.325)
            .ID("pnlLeft")
            .PaddingSpec(sPanelLeftPaddingSpec)
            .Items(
               X.Label().ID("LblRemaining").Text("Time Remaining 00:00:00").Cls("lblremaining").PaddingSpec(sToolbarPaddingSpec),
               X.TextFieldFor(model => model.FPTID)
                                    .FieldLabel(FPTNegotiationRoundVM.Prop.FPTID.Desc)
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth)
                                    .Hidden(true),
               X.TextField().FieldLabel("Vendor Name").ReadOnly(true).LabelWidth(iLabelWidth).Width(iFieldWidth).Value(VendorName),
               X.TextFieldFor(model => model.Schedule)
                                    .FieldLabel(FPTNegotiationRoundVM.Prop.Schedule.Desc)
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.TextField().FieldLabel("FPT").ReadOnly(true).LabelWidth(iLabelWidth).Width(iFieldWidth).Value(FPTName),
               X.TextFieldFor(model => model.RoundNo)
                                    .FieldLabel(FPTNegotiationRoundVM.Prop.RoundNo.Desc)
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.TextFieldFor(model => model.TotalRound)
                                    .FieldLabel("Total Round")
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.Label().Text("Additional Info").PaddingSpec(sToolbarPaddingSpec),
               X.DateFieldFor(model => model.FPTScheduleStart)
                                    .FieldLabel("Schedule Start")
                                    .Format("dd-MMM-yyyy")
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.DateFieldFor(model => model.FPTScheduleEnd)
                                    .FieldLabel("Schedule End")
                                    .Format("dd-MMM-yyyy")
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.TextFieldFor(model => model.FPTDuration)
                                    .FieldLabel("Duration")
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.TextFieldFor(model => model.MaintenancePeriod)
                                    .FieldLabel("Maintenance Period")
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.TextFieldFor(model => model.Guarantee)
                                    .FieldLabel("Guarantee")
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.TextFieldFor(model => model.ContractType)
                                    .FieldLabel("Contract Type")
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
               X.TextAreaFor(model => model.PaymentMethod)
                                    .FieldLabel("Payment Method")
                                    .ReadOnly(true)
                                    .LabelWidth(iLabelWidth)
                                    .Width(iFieldWidth),
            X.Label().Text("*Harga Pekerjaan Termasuk Jasa dan PPh (Belum Termasuk PPn 10%)").PaddingSpec(sToolbarPaddingSpec)

                ),
            X.Panel()
            .Cls("fullOnSmall")
            .ColumnWidth(0.675)
            .ID("pnlRight")
            .PaddingSpec(sPanelRightPaddingSpec)
            .Items(
                X.Label()
                .Html("<span class='legendbox' style='background-color:red;'>&nbsp;</span><i> Higher</i>")
                .Cls("lblhigherinfo"),
                X.FormPanel()
                .ID("FPBid")
                .Loader(
                    X.ComponentLoader()
                    .AutoLoad(true)
                    .Url(Url.Action("GetPanel"))
                    .Params(new { FPTID = FPTID, RoundID = RoundID, lastLevel = SubItemLevel })
                    .Mode(LoadMode.Component)
                )
                )

            )


    )
    .TopBar(
        X.Toolbar()
        .Items(
            btnSubmit.Hidden(true),
            btnList.Hidden(true)
            )
        )

)


