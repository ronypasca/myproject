@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model BudgetPlanVM
@{

    var X = Html.X();
    string sPageName = "Home";
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;
    /*bool IsDetailPage = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);
    */
    List<Parameter> oParamList;
    Parameter oParam;

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "getSelectedRow()", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDetail = global_asax.Button(Buttons.ButtonDetail, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter("BudgetPlanID", "App.grdBudgetPlan.getRowsValues({selectedOnly:true})[0].BudgetPlanID", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    Button.Builder btnExport = global_asax.Button(Buttons.ButtonExport, sPageName, "Export", "../ReportComparison/ExportReportToExcel", true, false, false, null, oParamList, null, "SuccessExport");

    <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdBudgetPlan()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdBudgetPlan();
        });

        resizeGrdBudgetPlan = function () {
            if (App.grdBudgetPlan != null)
                App.grdBudgetPlan.setHeight($(window).height() - App.grdBudgetPlan.getY() - (App.grdBudgetPlan.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionChange = function (length,rowSelected) {
            App.ButtonDetailHome.setDisabled(length != 1 || rowSelected[0].data.Vendor.length <= 0);
            App.ButtonExportHome.setDisabled(length != 1 || rowSelected[0].data.Vendor.length <= 0);
            /*App.ButtonUpdateHome.setDisabled(length != 1);*/
        };

        deleteFinish = function (success, msg) {
            if (success)
                App.grdBudgetPlan.getStore().reload();
            else
                showError(sTitle, msg);
        };
        getSelectedRow = function(){
            var selected = App.grdBudgetPlan.getRowsValues({selectedOnly:true})[0];
            selected.Vendor = null;
            return selected;
        };
        var SuccessExport = function (filename) {      
            window.location = "Content/"+JSON.parse(filename.responseText).result;  
            Ext.Ajax.request({
                url: '../ReportComparison/ClearExcelFile',
                method: 'POST',
                params:{
                    filename: JSON.parse(filename.responseText).result
                },
                failure: function (response) {
                    Ext.Msg.alert("Error Delete from Server", response);
                }
            });
        };
    </script>
}
@(
    X.GridPanel()
    .ID("grdBudgetPlan")
    .Padding(iBodyPadding)
    .MinHeight(iGridMinHeight)
    .SelectionModel(
        X.RowSelectionModel()
        .Mode(SelectionMode.Multi)
        .AllowDeselect(true)
    )
    .Listeners(oListener =>
    {
        oListener.SelectionChange.Handler = "selectionChange(selected.length,selected)";
    })
    .Store(
        X.StoreForModel()
        .Proxy(
            X.AjaxProxy()
            .Url(Url.Action("Read"))
            .Reader(X.JsonReader().RootProperty("data"))
        )
        .AutoLoad(true)
        .RemoteSort(true)
        .RemotePaging(true)
        .RemoteFilter(true)
        .PageSize(iPageSize)
        .SorterFor(Model, model => model.BudgetPlanID, Ext.Net.SortDirection.ASC)
    )
    .ColumnModel(

        X.Column()
        .Text(BudgetPlanVM.Prop.BudgetPlanID.Desc)
        .DataIndex(Model, model => model.BudgetPlanID)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text("Last Ver.")
        .DataIndex(Model, model => model.BudgetPlanVersion)
        .Flex(2).Hidden(true)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVM.Prop.Description.Desc)
        .DataIndex(Model, model => model.Description)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVM.Prop.BudgetPlanTemplateDesc.Desc)
        .DataIndex(Model, model => model.BudgetPlanTemplateDesc)
        .Flex(2)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVM.Prop.ProjectDesc.Desc)
        .DataIndex(Model, model => model.ProjectDesc)
        .Flex(2)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVM.Prop.ClusterDesc.Desc)
        .DataIndex(Model, model => model.ClusterDesc)
        .Flex(2)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVM.Prop.UnitTypeDesc.Desc)
        .DataIndex(Model, model => model.UnitTypeDesc)
        .Flex(2)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVM.Prop.Vendor.Desc)
        .DataIndex(Model, model => model.Vendor)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),

        X.Column()
        .Text(BudgetPlanVM.Prop.StatusDesc.Desc)
        .DataIndex(Model, model => model.StatusDesc)
        .Flex(1)
        .Items(
                X.ComboBox()
                    .DisplayField(StatusVM.Prop.StatusDesc.Name)
                    .ValueField(StatusVM.Prop.StatusDesc.Name)
                    .Store(
                        X.StoreForModel()
                        .Proxy(X.AjaxProxy()
                            .Url(Url.Action("/GetStatusList"))
                            .Reader(X.JsonReader().RootProperty("data"))
                        )
                        .AutoLoad(true)
                    ).Plugins(Html.X().ClearButton())

        )
    )
    .Plugins(
        X.FilterHeader()
        .Remote(true)
    )
    .TopBar(
        X.Toolbar()
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
            btnDetail.Disabled(true),
            btnExport.Disabled(true)
            //,btnUpdate.Disabled(true)
        )
    )
    .BottomBar(
        X.PagingToolbar()
        .DisplayInfo(true)
        .BaseCls("paging")
        .DisplayMsg("Displaying {0} - {1} of {2}")
        .EmptyMsg("No records to display")
    )
)