@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model StatusVM
@{
    
    var X = Html.X();
    string sPageName = "Status";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    string sHandler = "selectStatusBrowse('" + ViewData["Control" + MyTaskVM.Prop.StatusID.Name]
        + "', '" + ViewData["Control" + StatusVM.Prop.StatusDesc.Name]
        + "', '" + ViewData["isTaskCreator"]
        + "', App.grdStatusBrowse.getRowsValues({selectedOnly:true})[0].StatusID"
        + ", App.grdStatusBrowse.getRowsValues({selectedOnly:true})[0].StatusDesc"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, null, true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdStatusBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdStatusBrowse();
        });

        resizeGrdStatusBrowse = function () {
            if (App.grdStatusBrowse != null)
                App.grdStatusBrowse.setHeight($(window).height() - App.grdStatusBrowse.getY() - (App.grdStatusBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionStatusChange = function (length) {
            App.ButtonSelectStatus.setDisabled(length < 1);
        };

        doFilter = function (filter, StatusID, StatusDesc) {
            filter.fields[0].items.items[0].setValue(StatusID);
            filter.fields[1].items.items[0].setValue(StatusDesc);
        };

        selectStatusBrowse = function (ControlStatusID, ControlStatusDesc,isTaskCreator, StatusID, StatusDesc) {
            debugger;
            if (Ext.getCmp(ControlStatusID) != undefined) {
                Ext.getCmp(ControlStatusID).setValue(StatusID);
                Ext.getCmp(ControlStatusID).originalValue = StatusID;
            }
            if (Ext.getCmp(ControlStatusDesc) != undefined) {
                Ext.getCmp(ControlStatusDesc).setValue(StatusDesc);
                Ext.getCmp(ControlStatusDesc).originalValue = StatusDesc;
            }
            App.WinBrowseStatus.close();
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseStatus")
    .Modal(true)
    .Title(ViewBag.Title)
    .Width(iWindowWidth)
    .Items(
        X.GridPanel()
        .ID("grdStatusBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionStatusChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[StatusVM.Prop.StatusID.Name].ToString() + "', '" + ViewData[StatusVM.Prop.StatusDesc.Name].ToString() + "');";
            oListener.ViewReady.Delay = 1;oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowseStatus", "MyTask"))
                .Reader(X.JsonReader().RootProperty("data"))
                .ExtraParams(exParam =>
                                            exParam.AddRange(new Parameter[]{
                                                    new Parameter()
                                                        {
                                                            Name = "isTaskCreator",
                                                            Value = ViewData["isTaskCreator"].ToString(),
                                                            Mode = ParameterMode.Value,
                                                            Encode = false
                                                        }
                                                })
                                        )
            )
            .AutoLoad(ViewData[StatusVM.Prop.StatusID.Name].ToString() == "" && ViewData[StatusVM.Prop.StatusDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.StatusID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(StatusVM.Prop.StatusID.Desc)
            .DataIndex(Model, model => model.StatusID)
            .Flex(1).Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(StatusVM.Prop.StatusDesc.Desc)
            .DataIndex(Model, model => model.StatusDesc)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)