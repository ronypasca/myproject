@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model List<UserBudgetPlanAccessVM>
@{
    var X = Html.X();
    var iBodyPadding = 10;
    var sToolbarPaddingSpec = "0 10 10 0";
    var iLabelWidth = 175;
    var iFieldWidth = 420;
    int iGridMinHeight = 250;
    int iPageSize = 10;
    List<Parameter> oParamList;
    Parameter oParam;
    oParamList = new List<Parameter>();

    oParam = new Parameter("GridCaller", "grdUserAccess", ParameterMode.Value, false);
    oParamList.Add(oParam);
    oParam = new Parameter("ControllerCaller", "BudgetPlanTemplate", ParameterMode.Value, false);
    oParamList.Add(oParam);

    Button.Builder btnAddUserAccess = global_asax.Button(Buttons.ButtonAdd, "User", "Add", "../User/" + General.EnumDesc(Buttons.ButtonBrowse), true, false, false, null, oParamList);
    Button.Builder btnDeleteUserAccess = global_asax.Button(Buttons.ButtonDelete, "User", "Delete", "", true);
    bool isReadOnly = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);
    <script>
        resizegrdUserAccess = function () {
            if (App.grdUserAccess != null)
                App.grdUserAccess.setHeight($(window).height() - App.grdUserAccess.getY() - (App.grdUserAccess.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionChange_DU = function (length) {
            if (App.ButtonSaveUpdate.setVisible == true) {
                App.ButtonDeleteUser.setDisabled(false);
            }
        };

        deleteUserAccess = function () {
            
            App.grdUserAccess.getStore().remove(App.grdUserAccess.getSelectionModel().getSelection());
        };

        getListUserAccess = function () {
            var data = [];
            for (var x in App.grdUserAccess.store.data.items) {
                var take = App.grdUserAccess.store.data.items[x].data;
                data.push(take);
            }
            return data;
        };

        var renderStartTime = function(record){
            return record.data.StartDateHours;
        };

        var renderEndTime = function(record){
            return record.data.EndDateHours;
        };

        var editUserAccess = function (editor, e) {

            if (e.field == "StartDate") {
                App.grdBudgetPlanVersionVendor.getStore().sort({ property: 'StartDate', direction: 'ASC' });
            }
            if (e.field == "StartHours") {
                e.record.set("StartDateHours", Ext.Date.dateFormat(new Date(e.value), "H:i"));
                e.record.commit();
            }
            if (e.field == "EndHours") {
                e.record.set("EndDateHours", Ext.Date.dateFormat(new Date(e.value), "H:i"));
                e.record.commit();
            }
            if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
                e.record.commit();
            }
        };

        var beforeEditUserAccess = function (editor, e) {
            App.grdUserAccess.getSelectionModel().select(e.record);
        };
    </script>
}

@(
        X.GridPanel()
            .Disable(isReadOnly)
            .ID("grdUserAccess")
            .Padding(iBodyPadding)
            .MinHeight(iGridMinHeight)
            .SelectionModel(
                X.RowSelectionModel()
                .Mode(SelectionMode.Single)
                .AllowDeselect(isReadOnly)
                
            )
            .Listeners(oListener =>
            {
                oListener.SelectionChange.Handler = "selectionChange_DU(selected.length)";
            })
            .Store(
                X.Store()
                .AutoLoad(true)
                .RemoteSort(true)
                .RemotePaging(true)
                .RemoteFilter(true)
                .PageSize(iPageSize)
                .DataSource(Model)
                .Model(
                    X.Model()
                    .Name("ModelUserAccess")
                    .Fields(
                        X.ModelField().Name(Model, model => model.UserID),
                        X.ModelField().Name(Model, model => model.BudgetPlanTemplateID),
                        X.ModelField().Name(Model, model => model.StartDate).Type(ModelFieldType.Date),
                        X.ModelField().Name(Model, model => model.EndDate).Type(ModelFieldType.Date)
                    )
                )
                .SorterFor(Model, model => model.UserID, Ext.Net.SortDirection.ASC)
            )
            .ColumnModel(
                X.Column()
                .Text(UserBudgetPlanAccessVM.Prop.UserID.Name)
                .DataIndex(Model, model => model.UserID)
                .Hidden(false)
                .Flex(1)
                .Items(
                    X.Container()
                    .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                    .Layout(LayoutType.HBox)
                    .Items(
                        X.TextField()
                        .ReadOnly(isReadOnly)
                        .Flex(1)
                        .Listeners(oListener =>
                        {
                            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                        })
                    )
                ),
                X.Column()
                .Text(UserBudgetPlanAccessVM.Prop.BudgetPlanTemplateID.Name)
                .DataIndex(Model, model => model.BudgetPlanTemplateID)
                .Hidden(true)
                .Flex(1)
                .Items(
                    X.Container()
                    .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                    .Layout(LayoutType.HBox)
                    .Items(
                        X.TextField()
                        .Flex(1)
                        .Listeners(oListener =>
                        {
                            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                        })
                    )
                ),
                X.Column()
                .Text(UserBudgetPlanAccessVM.Prop.StartDate.Desc)
                .Flex(1)
                .Columns(
                    X.DateColumn()
                    .Text("Date")
                    .DataIndex(Model, model => model.StartDate)
                    .Format(global_asax.DefaultDateFormat)
                    .Items(
                        X.Container()
                        .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueDateRange", ParameterMode.Raw)))
                        .Layout(LayoutType.HBox)
                        .Items(
                            X.DateField()
                            .Flex(1)
                            .Format(global_asax.DefaultDateFormat)
                            .HideTrigger(true)
                            .Listeners(oListener =>
                            {
                                oListener.Blur.Handler = "this.triggerEl.hide();";
                                oListener.Focus.Handler = "this.triggerEl.show();";
                                oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                            }),
                            X.DateField()
                            .Flex(1)
                            .Format(global_asax.DefaultDateFormat)
                            .HideTrigger(true)
                            .Listeners(oListener =>
                            {
                                oListener.Blur.Handler = "this.triggerEl.hide();";
                                oListener.Focus.Handler = "this.triggerEl.show();";
                                oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                            })
                        ))
                    .Editor(
                        X.DateField()
                        .Format(global_asax.DefaultDateFormat)
                        .ReadOnly(isReadOnly)
                        .SubmitValue(true)
                        .AllowBlank(false)
                       .ID("ColStartDate")
                    )

            ),
                X.Column()
                .Text(UserBudgetPlanAccessVM.Prop.EndDate.Desc)
                .Flex(1)
                .Columns(
                   X.DateColumn()
                        .Text("Date")
                        .DataIndex(Model, model => model.EndDate)
                        .Format(global_asax.DefaultDateFormat)
                        .Sortable(false)
                        .Items(
                            X.Container()
                            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueDateRange", ParameterMode.Raw)))
                            .Layout(LayoutType.HBox)
                            .Items(
                                X.DateField()
                                .Flex(1)
                                .Format(global_asax.DefaultDateFormat)
                                .HideTrigger(true)
                                .Listeners(oListener =>
                                {
                                    oListener.Blur.Handler = "this.triggerEl.hide();";
                                    oListener.Focus.Handler = "this.triggerEl.show();";
                                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                                }),
                                X.DateField()
                                .Flex(1)
                                .Format(global_asax.DefaultDateFormat)
                                .HideTrigger(true)
                                .Listeners(oListener =>
                                {
                                    oListener.Blur.Handler = "this.triggerEl.hide();";
                                    oListener.Focus.Handler = "this.triggerEl.show();";
                                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                                })
                            ))
                        .Editor(
                            X.DateField()
                            .Format(global_asax.DefaultDateFormat)
                            .ReadOnly(isReadOnly)
                            .SubmitValue(true)
                            .AllowBlank(false)
                            .ID("ColEndDate")
                       )

                )
            )
            .Plugins(
                X.FilterHeader()
                .Remote(false),
                X.CellEditing()
                     .ClicksToEdit(1)
                        .Listeners(ls => ls.Edit.Fn = "editUserAccess")
                        .Listeners(ls => ls.BeforeEdit.Fn = "beforeEditUserAccess")
                        .ID("rowEditorUserAccess")
            )
            .TopBar(
                X.Toolbar()
                .PaddingSpec(sToolbarPaddingSpec)
                .Items(
                    btnAddUserAccess.Disabled(isReadOnly),
                    btnDeleteUserAccess.Disabled(isReadOnly).Handler("deleteUserAccess()")
                )
            )
            .BottomBar(
                X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
            )


)

