@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model VendorSubcategoryVM
@{
    
    var X = Html.X();
    string sPageName = "VendorSubcategory";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    string sHandler = "selectVendorSubcategoryBrowse('" + ViewData["Control" + VendorSubcategoryVM.Prop.VendorSubcategoryID.Name]+"'"
        + ", '" + ViewData["Control" + VendorSubcategoryVM.Prop.VendorSubcategoryDesc.Name]+"'"
        + ", '" + ViewData["Control" + VendorSubcategoryVM.Prop.VendorCategoryDesc.Name] + "'"
        + ", App.grdVendorSubcategoryBrowse.getRowsValues({selectedOnly:true})[0]['" + VendorSubcategoryVM.Prop.VendorSubcategoryID.Name + "']"
        + ", App.grdVendorSubcategoryBrowse.getRowsValues({selectedOnly:true})[0]['" + VendorSubcategoryVM.Prop.VendorSubcategoryDesc.Name + "']"
        + ", App.grdVendorSubcategoryBrowse.getRowsValues({selectedOnly:true})[0]['" + VendorSubcategoryVM.Prop.VendorCategoryDesc.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, null, true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdVendorSubcategoryBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdVendorSubcategoryBrowse();
        });

        resizeGrdVendorSubcategoryBrowse = function () {
            if (App.grdVendorSubcategoryBrowse != null)
                App.grdVendorSubcategoryBrowse.setHeight($(window).height() - App.grdVendorSubcategoryBrowse.getY() - (App.grdVendorSubcategoryBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionVendorSubcategoryChange = function (length) {
            App.ButtonSelectVendorSubcategory.setDisabled(length < 1);
        };

        doFilter = function (filter, VendorSubcategoryID, VendorSubcategoryDesc) {
            filter.fields[0].items.items[0].setValue(VendorSubcategoryID);
            filter.fields[1].items.items[0].setValue(VendorSubcategoryDesc);
        };

        selectVendorSubcategoryBrowse = function (ControlVendorSubcategoryID, ControlVendorSubcategoryDesc, ControlVendorCategoryDesc, VendorSubcategoryID, VendorSubcategoryDesc, VendorCategoryDesc) {
            if (Ext.getCmp(ControlVendorSubcategoryID) != undefined) {
                Ext.getCmp(ControlVendorSubcategoryID).setValue(VendorSubcategoryID);
                Ext.getCmp(ControlVendorSubcategoryID).originalValue = VendorSubcategoryID;
            }
            if (Ext.getCmp(ControlVendorSubcategoryDesc) != undefined) {
                Ext.getCmp(ControlVendorSubcategoryDesc).setValue(VendorSubcategoryDesc);
                Ext.getCmp(ControlVendorSubcategoryDesc).originalValue = VendorSubcategoryDesc;
            }
            if (Ext.getCmp(ControlVendorCategoryDesc) != undefined) {
                Ext.getCmp(ControlVendorCategoryDesc).setValue(VendorCategoryDesc);
                Ext.getCmp(ControlVendorCategoryDesc).originalValue = VendorCategoryDesc;
            }
            App.WinBrowseVendorSubcategory.close();
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseVendorSubcategory")
    .Modal(true)
    .Title(ViewBag.Title)
    .Width(iWindowWidth)
    .Items(
        X.GridPanel()
        .ID("grdVendorSubcategoryBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionVendorSubcategoryChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader "
            + ",'" + ViewData[VendorSubcategoryVM.Prop.VendorSubcategoryID.Name].ToString() + "' "
            + ",'" + ViewData[VendorSubcategoryVM.Prop.VendorSubcategoryDesc.Name].ToString() + "' "
            + ");";
            oListener.ViewReady.Delay = 1;oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowse", "VendorSubcategory"))
                .Reader(X.JsonReader().RootProperty("data"))
            )
            .AutoLoad(ViewData[VendorSubcategoryVM.Prop.VendorSubcategoryID.Name].ToString() == "" && ViewData[VendorSubcategoryVM.Prop.VendorSubcategoryDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.VendorSubcategoryID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(VendorSubcategoryVM.Prop.VendorSubcategoryID.Desc)
            .DataIndex(Model, model => model.VendorSubcategoryID)
            .Flex(1)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(VendorSubcategoryVM.Prop.VendorSubcategoryDesc.Desc)
            .DataIndex(Model, model => model.VendorSubcategoryDesc)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)