@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model FPTVM
@{
    var X = Html.X();
    string sPageName = "Home";
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;
    /*bool IsDetailPage = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);
    */
    List<Parameter> oParamList;
    Parameter oParam;

    Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, sPageName, null, null, true, false, false, Buttons.ButtonList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdFPT.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDetail = global_asax.Button(Buttons.ButtonDetail, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdFPT.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnUpdate = global_asax.Button(Buttons.ButtonUpdate, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdFPT.getRowsValues({selectedOnly:true})", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, null, true, false, false, null, oParamList, null, "deleteFinish(true)", "deleteFinish(false, result.errorMessage)");

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdFPT.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    //oParam = new Parameter("isStatus", "true", ParameterMode.Raw, true);
    //oParamList.Add(oParam);

    Button.Builder btnStatus = global_asax.Button(Buttons.ButtonPreview, sPageName, "Status Tracking", "StatusTracking", true, paramList: oParamList);



    <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdFPT()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdFPT();
        });

        resizeGrdFPT = function () {
            if (App.grdFPT != null)
                App.grdFPT.setHeight($(window).height() - App.grdFPT.getY() - (App.grdFPT.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionChange = function (selected) {
            App.ButtonDetailHome.setDisabled(selected.length !== 1);
            App.ButtonUpdateHome.setDisabled(selected.length !== 1);
            /*App.ButtonDeleteHome.setDisabled(selected.length < 1);*/
            App.ButtonPreviewHome.setDisabled(selected.length !== 1);

            var selectedRows=App.grdFPT.getRowsValues({selectedOnly:true});
            if(selectedRows.length>0){
                for (var i = 0; i < selectedRows.length; i++) {
                    if(selectedRows[i].LastStatus=="Deleted"){ /*Deleted*/
                        App.ButtonUpdateHome.setDisabled(true);
                        /*App.ButtonDeleteHome.setDisabled(true);*/
                    }
                }
            }


            
        };

        deleteFinish = function (success, msg) {
            if (success)
                App.grdFPT.getStore().reload();
            else
                showError(sTitle, msg);
        };

        getSelectedRow = function(){
            var selected = App.grdFPT.getRowsValues({selectedOnly:true})[0];
            selected.Vendor = null;
            return selected;

        };

        RendererBR = function(records){
            var newchar = '<br>';
            retval = records.split('$').join(newchar);
            return retval;
        };


    </script>
}
@(
    X.GridPanel()
    .ID("grdFPT")
    .Padding(iBodyPadding)
    .MinHeight(iGridMinHeight)
    .SelectionModel(
        X.RowSelectionModel()
        .Mode(SelectionMode.Multi)
        .AllowDeselect(true)
    )
    .Listeners(oListener =>
    {
        oListener.SelectionChange.Handler = "selectionChange(selected)";
    })
    .Store(
        X.StoreForModel()
        .Proxy(
            X.AjaxProxy()
            .Url(Url.Action("Read"))
            .Reader(X.JsonReader().RootProperty("data"))
        )
        .AutoLoad(true)
        .RemoteSort(true)
        .RemotePaging(true)
        .RemoteFilter(true)
        .PageSize(iPageSize)
        .SorterFor(Model, model => model.CreatedDate, Ext.Net.SortDirection.DESC)
    )
    .ColumnModel(
        X.Column()
        .Text(FPTVM.Prop.FPTID.Desc)
        .DataIndex(Model, model => model.FPTID)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(FPTVM.Prop.Descriptions.Desc)
        .DataIndex(Model, model => model.Descriptions)
        .Flex(2)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(FPTVM.Prop.Projects.Desc)
        .DataIndex(Model, model => model.Projects)
        .Flex(3)
        .Renderer("RendererBR")
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(FPTVM.Prop.BudgetPlans.Desc)
        .DataIndex(Model, model => model.BudgetPlans)
        .Flex(3)
        .Renderer("RendererBR")
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(FPTVM.Prop.Vendors.Desc)
        .DataIndex(Model, model => model.Vendors)
        .Flex(3)
        .Renderer("RendererBR")
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.DateColumn()
        .Text(FPTVM.Prop.Schedule.Desc)
        .DataIndex(Model, model => model.ScheduleDateFPT)
        .Flex(3)
        .Format(global_asax.DefaultDateFormat)

        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(FPTVM.Prop.LastStatus.Desc)
        .DataIndex(Model, model => model.LastStatus)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )),
        X.Column()
        .Text(FPTVM.Prop.AdditionalInfo1.Desc)
        .DataIndex(Model, model => model.AdditionalInfo1)
        .Flex(3)
        .Hidden(true)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )),
        X.Column()
        .Text(FPTVM.Prop.AdditionalInfo1Desc.Desc)
        .DataIndex(Model, model => model.AdditionalInfo1Desc)
        .Flex(3)
        .Hidden(true)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )),
        X.Column()
        .Text(FPTVM.Prop.IsSync.Desc)
        .DataIndex(Model, model => model.IsSync)
        .Hidden(true)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.DateColumn()
        .Text(FPTVM.Prop.CreatedDate.Desc)
        .DataIndex(Model, model => model.CreatedDate)
        .Flex(3)
        .Format(global_asax.DefaultDateFormat)
        .Hidden(true)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        )

    )
    .Plugins(
        X.FilterHeader()
        .Remote(true)
    )
    .TopBar(
        X.Toolbar()
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
            btnAdd.Disabled(false),
            btnDetail.Disabled(true),
            btnUpdate.Disabled(true),
            btnDelete.Disabled(true),
            btnStatus.Disabled(true)
        )
    )
    .BottomBar(
        X.PagingToolbar()
        .DisplayInfo(true)
        .BaseCls("paging")
        .DisplayMsg("Displaying {0} - {1} of {2}")
        .EmptyMsg("No records to display")
    )
)