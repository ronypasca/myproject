@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model List<TemplateTagsVM>
@{
    string sPageName = "HomeTemplateTagsVM";
    var X = Html.X();
    var iBodyPadding = 10;
    var sToolbarPaddingSpec = "0 10 10 0";
    int iGridMinHeight = 250;
    bool isDetailButton = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);
    Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, sPageName, null, null, true, false, false, Buttons.ButtonList);
    Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, null, true, false, false, Buttons.ButtonList);
    Button.Builder btnPreBuild = global_asax.Button(Buttons.ButtonList, sPageName, "Pre-Build Recipients", null, true, false, false, Buttons.ButtonList);
}

<script>
    GetListTemplateTagsVM = function () {
        var data = [];
        for (var x in App.grdTemplateTagsVM.store.data.items) {
            data.push(App.grdTemplateTagsVM.store.data.items[x].data);
        }
        return data;
    };

    selectionChanged = function (length) {

        @*var FromDetail = '@ViewData[General.EnumDesc(Params.Action)].ToString()';

        if (FromDetail !== 'Detail') {
            App.ButtonDeleteRecipient.setDisabled(length < 1)
        }*@
    };

    onEditMinutesEntryValues = function (editor, e) {
        debugger;
        if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
            e.record.commit();
        }
    };

    onBeforeEditMinutesEntryValues = function (editor, e) {
        if ("@isDetailButton" == "True")
            return false;

        App.grdTemplateTagsVM.getSelectionModel().select(e.record);
    };
    beforeSelect = function () {
        @*App.grdNotificationValues.getSelectionModel().deselectAll();*@

    };

    selectMinutes = function (grd, record, index, eOpts) {
        dt = record.data;
        debugger;
        val = "";
        if (!Ext.isEmpty(dt.Value))
            val = dt.Value;
        CKEDITOR.instances.Contents.setData(val);
    };
</script>

@(
    X.GridPanel()
        .ID("grdTemplateTagsVM")
        .View(
        Html.X()
        .GridView()
        )
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Single)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionChanged(selected.length)";
            oListener.BeforeSelect.Fn = "beforeSelect";
            oListener.Select.Fn = "selectMinutes";

        })
        .Store(
            X.StoreForModel()
            .AutoLoad(true)
            .RemoteSort(false)
            .RemotePaging(true)
            .RemoteFilter(false)
            //.PageSize(iPageSize)
            .SorterFor(Model, model => model.TemplateTagID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
        X.Column()
        .Text("ID")
        .Hidden(true)
        .DataIndex(Model, model => model.TemplateTagID)
        .Flex(4),
        X.Column()
        .Text("Tag Name")
        .DataIndex(Model, model => model.FieldTagID)
        .Flex(4),
        X.Column()
        .DataIndex(Model, model => model.Value)
        .Flex(5)
        .Text(NotificationValuesVM.Prop.Value.Desc)
        .Hidden(true)
        .Editor(
            X.TextArea()
            )

        )

        .BottomBar(
            X.PagingToolbar()
            .DisplayInfo(true)
            .BaseCls("paging")
            .DisplayMsg("Displaying {0} - {1} of {2}")
            .EmptyMsg("No records to display")
        )
        .Plugins(
        X.FilterHeader()
        .Remote(true),
        Html.X().CellEditing().ClicksToEdit(1)
                    .Listeners(ls => ls.Edit.Fn = "onEditMinutesEntryValues")
                    .Listeners(ls => ls.BeforeEdit.Fn = "onBeforeEditMinutesEntryValues")
    )
        .TopBar(
        X.Toolbar()
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
        //btnAdd.Disabled(false),
        //btnDelete.Disabled(true),
        //btnPreBuild.Disabled(false)
        )
    )


)