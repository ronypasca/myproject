@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model ItemPriceVendorPeriodVM
@{
    ViewBag.Title = "Item Price Vendor Period";
    var X = Html.X();
    string sPageName = "ItemPriceVendorPeriod";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    string sHandler = "selectItemPriceVendorPeriodBrowse('" + ViewData["Control" + ItemVM.Prop.ItemID.Name]
        + "', '" + ViewData["Control" + ItemVM.Prop.ItemDesc.Name]
        + "', '" + ViewData["Control" + ItemPriceVendorVM.Prop.VendorDesc.Name]
        + "', '" + ViewData["Control" + ItemPriceVendorVM.Prop.VendorID.Name]
        + "', '" + ViewData["Control" + ItemPriceVendorPeriodVM.Prop.Amount.Name]
        + "', App.grdItemPriceVendorPeriodBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemVM.Prop.ItemID.Name + "']"
        + ", App.grdItemPriceVendorPeriodBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemVM.Prop.ItemDesc.Name + "']"
        + ", App.grdItemPriceVendorPeriodBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemPriceVendorVM.Prop.VendorDesc.Name + "']"
        + ", App.grdItemPriceVendorPeriodBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemPriceVendorVM.Prop.VendorID.Name + "']"
        + ", App.grdItemPriceVendorPeriodBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemPriceVendorPeriodVM.Prop.Amount.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, null, true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdItemPriceVendorPeriodBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdItemPriceVendorPeriodBrowse();
        });

        resizeGrdItemPriceVendorPeriodBrowse = function () {
            if (App.grdItemPriceVendorPeriodBrowse != null)
                App.grdItemPriceVendorPeriodBrowse.setHeight($(window).height() - App.grdItemPriceVendorPeriodBrowse.getY() - (App.grdItemPriceVendorPeriodBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionItemPriceVendorPeriodChange = function (length) {
            App.ButtonSelectItemPriceVendorPeriod.setDisabled(length < 1);
        };

        doFilter = function (filter, uoMID, uoMDesc) {
            filter.fields[0].items.items[0].setValue(uoMID);
            filter.fields[1].items.items[0].setValue(uoMDesc);
        };

        selectItemPriceVendorPeriodBrowse = function (ControlItemID, ControlItemDesc, ControlVendorDesc, ControlVendorID, ControlAmount,
            ItemID, ItemDesc, VendorDesc, VendorID, Amount) {
            if (Ext.getCmp(ControlItemID) != undefined) {
                Ext.getCmp(ControlItemID).setValue(ItemID);
                Ext.getCmp(ControlItemID).originalValue = ItemID;
            }
            if (Ext.getCmp(ControlItemDesc) != undefined) {
                Ext.getCmp(ControlItemDesc).setValue(ItemDesc);
                Ext.getCmp(ControlItemDesc).originalValue = ItemDesc;
            }
            if (Ext.getCmp(ControlVendorDesc) != undefined) {
                Ext.getCmp(ControlVendorDesc).setValue(VendorDesc);
                Ext.getCmp(ControlVendorDesc).originalValue = VendorDesc;
            }
            if (Ext.getCmp(ControlVendorID) != undefined) {
                Ext.getCmp(ControlVendorID).setValue(VendorID);
                Ext.getCmp(ControlVendorID).originalValue = VendorID;
            }
            if (Ext.getCmp(ControlAmount) != undefined) {
                Ext.getCmp(ControlAmount).setValue(Amount);
                Ext.getCmp(ControlAmount).originalValue = Amount;
            }

            if (App.treePanelBudgetVersionStructure != undefined) {
                var node = App.treePanelBudgetVersionStructure.getSelection()[0];
                var coefficient = node.get("coefficient");
                if (node.get("materialamount") != null) node.set("materialamount", Amount * coefficient);
                else if (node.get("wageamount") != null) node.set("wageamount", Amount * coefficient);
                else if (node.get("miscamount") != null) node.set("miscamount", Amount * coefficient);
                node.commit();
                
                parent.recalculatePrice(node.parentNode);
            }

            if (App.treeSimulation != undefined) {
                var selectedNode = App.treeSimulation.getSelection()[0].data.vendorid = VendorID;
                RecountAmount();
            }
            if (App.grdItemVersionAHSReport != undefined) {
                debugger;
                var record = App.grdItemVersionAHSReport.getSelection()[0].data;
                record.UnitPrice = Amount;
                record.TotalUnitPrice = record.UnitPrice * record.Coefficient;
                App.grdItemVersionAHSReport.getView().refresh();
                recalculateTotalUnitPrice(record);
            }

            App.WinBrowseItemPriceVendorPeriod.close();

        };

        renderAmount = function (record) {
            return record.get('DisplayPrice')==false && record.get('VendorID') != "" ? Ext.util.Format.number(record.get('Amount'), integerNumberFormat) : ''
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseItemPriceVendorPeriod")
    .Modal(true)
    .Title(ViewBag.Title)
    .Width(iWindowWidth)
    .ConstrainHeader(true)
    .Layout(LayoutType.Fit)
    .Items(
        X.GridPanel()
        .ID("grdItemPriceVendorPeriodBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionItemPriceVendorPeriodChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[ItemVM.Prop.ItemID.Name].ToString() + "', '" + ViewData[ItemVM.Prop.ItemDesc.Name].ToString() + "');";
            oListener.ViewReady.Delay = 1;oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowseItemPriceVendorPeriod", "Item"))
                .Reader(X.JsonReader().RootProperty("data"))
                .ExtraParams(exParam =>
                        exParam.AddRange(new Parameter[]{
                            new Parameter()
                            {
                                Name = ItemVM.Prop.ItemID.Name,
                                Value = ViewData["Value" + ItemVM.Prop.ItemID.Name] == null ? string.Empty : ViewData["Value" + ItemVM.Prop.ItemID.Name].ToString(),
                                Mode = ParameterMode.Value,
                                Encode = false
                            },new Parameter()
                            {
                                Name = ItemPriceVM.Prop.RegionID.Name,
                                Value = ViewData[ItemPriceVM.Prop.RegionID.Name] == null ? string.Empty : ViewData[ItemPriceVM.Prop.RegionID.Name].ToString(),
                                Mode = ParameterMode.Value,
                                Encode = false
                            },
                            new Parameter()
                            {
                                Name = ItemPriceVM.Prop.ProjectID.Name,
                                Value = ViewData[ItemPriceVM.Prop.ProjectID.Name] == null ? string.Empty : ViewData[ItemPriceVM.Prop.ProjectID.Name].ToString(),
                                Mode = ParameterMode.Value,
                                Encode = false
                            },
                            new Parameter()
                            {
                                Name = ItemPriceVM.Prop.ClusterID.Name,
                                Value = ViewData[ItemPriceVM.Prop.ClusterID.Name] == null ? string.Empty : ViewData[ItemPriceVM.Prop.ClusterID.Name].ToString(),
                                Mode = ParameterMode.Value,
                                Encode = false
                            },
                            new Parameter()
                            {
                                Name = ItemPriceVM.Prop.UnitTypeID.Name,
                                Value = ViewData[ItemPriceVM.Prop.UnitTypeID.Name] == null ? string.Empty : ViewData[ItemPriceVM.Prop.UnitTypeID.Name].ToString(),
                                Mode = ParameterMode.Value,
                                Encode = false
                            }
                        })
                    )
            )
            .AutoLoad(ViewData[ItemVM.Prop.ItemID.Name].ToString() == "" && ViewData[ItemVM.Prop.ItemDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            //.SorterFor(Model, model => model.ItemID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(ItemPriceVM.Prop.ItemID.Desc)
            .DataIndex(Model, model => model.ItemID)
            .Flex(1)
            .Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(ItemVM.Prop.ItemDesc.Desc)
            .DataIndex(Model, model => model.ItemDesc)
            .Flex(3)
            .Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .DataIndex(Model, model => model.VendorID)
            .Hidden(true),
            X.Column()
            .Text(ItemPriceVendorVM.Prop.VendorDesc.Desc)
            .DataIndex(Model, model => model.VendorDesc)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.NumberColumn()
            .Text(ItemPriceVendorPeriodVM.Prop.Amount.Desc)
            .DataIndex(Model, model => model.Amount)
            .Flex(3)
            .Format(global_asax.IntegerNumberFormat)
            .Align(ColumnAlign.End)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
            .Renderer("return renderAmount(record);"),
            X.CheckColumn()
            .Text(ItemPriceVendorVM.Prop.IsDefault.Desc)
            .DataIndex(Model, model => model.IsDefault)
            .Flex(2)
            .Items(
                X.ComboBox()
                .DisplayField(ConfigBoolVM.Prop.Description.Name)
                .ValueField(ConfigBoolVM.Prop.ID.Name)
                .Store(
                        X.StoreForModel()
                        .Proxy(X.AjaxProxy()
                            .Url(Url.Action("../Config/GetBoolList"))
                            .Reader(X.JsonReader().RootProperty("data"))
                        )
                        .AutoLoad(true)
                     )

            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)