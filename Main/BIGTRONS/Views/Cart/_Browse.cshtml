@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model CatalogCartVM
@{
    var X = Html.X();
    string sPageName = "Cart";
    var iWindowWidth = 750;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    string sHandler = "selectCatalogCartBrowse('" + ViewData["Control" + CatalogCartVM.Prop.CatalogCartID.Name]
        + "', '" + ViewData["Control" + CatalogCartVM.Prop.CatalogCartDesc.Name]
        + "', App.grdCatalogCartBrowse.getRowsValues({selectedOnly:true})[0]['" + CatalogCartVM.Prop.CatalogCartID.Name + "']"
        + ", App.grdCatalogCartBrowse.getRowsValues({selectedOnly:true})[0]['" + CatalogCartVM.Prop.CatalogCartDesc.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, "", true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdCatalogCartBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdCatalogCartBrowse();
        });

        resizeGrdCatalogCartBrowse = function () {
            if (App.grdCatalogCartBrowse != null)
                App.grdCatalogCartBrowse.setHeight($(window).height() - App.grdCatalogCartBrowse.getY() - (App.grdCatalogCartBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionCatalogCartChange = function (length) {
            App.ButtonSelectCatalogCart.setDisabled(length < 1);
        };

        doFilter = function (filter, CatalogCartID, CatalogCartDesc) {
            filter.fields[0].items.items[0].setValue(CatalogCartID);
            filter.fields[2].items.items[0].setValue(CatalogCartDesc);
        };

        selectCatalogCartBrowse = function (ControlCatalogCartID, ControlCatalogCartDesc, CatalogCartID, CatalogCartDesc) {
            if (Ext.getCmp(ControlCatalogCartID) != undefined) {
                Ext.getCmp(ControlCatalogCartID).setValue(CatalogCartID);
                Ext.getCmp(ControlCatalogCartID).originalValue = CatalogCartID;
            }
            if (Ext.getCmp(ControlCatalogCartDesc) != undefined) {
                Ext.getCmp(ControlCatalogCartDesc).setValue(CatalogCartDesc);
                Ext.getCmp(ControlCatalogCartDesc).originalValue = CatalogCartDesc;
            }

            @*if (Ext.getCmp(ControlCatalogCartList) != undefined && ControlCatalogCartList.length > 0) {

                if (ControlCatalogCartList == "grdCatalogCartList") {

                    var errorMsg = [];

                    for (var i = 0; i < App.grdCatalogCartBrowse.getSelection().length; i++) {

                        var addAlternativeItem = true;
                        for (var j = 0; j < App.grdCatalogCartList.getStore().allData.items.length; j++) {
                            if (App.grdCatalogCartList.getStore().allData.items[j].data.CatalogCartID == App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartID
                                && App.grdCatalogCartList.getStore().allData.items[j].data.CatalogCartVersion == App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartVersion) {
                                addAlternativeItem = false;
                                break;
                            }
                        }
                        if (addAlternativeItem) {
                            if (isFromPackage == '1') {
                                var CatalogCartIDval= App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartID;
                                var CatalogCartVersionval= App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartVersion;
                                var CatalogCartTypeDescval= App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartTypeDesc;
                                var Descriptionval= App.grdCatalogCartBrowse.getSelection()[i].data.Description;
                                var StatusDescval= App.grdCatalogCartBrowse.getSelection()[i].data.StatusDesc;
                                var StatusIDval = App.grdCatalogCartBrowse.getSelection()[i].data.StatusID;
                                Ext.Ajax.request({
                                    url: '../CatalogCart/VerifyStructureBeforePackage',
                                    method: 'POST',
                                    params: {
                                        BPID: App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartID
                                        
                                    },
                                    success: function (response) {
                                        var jsonData = response.responseText;
                                        if (jsonData.length <= 0) {
                                            debugger;
                                            App.grdCatalogCartList.store.add(new ModelCatalogCartList({
                                                CatalogCartID: CatalogCartIDval,
                                                CatalogCartVersion: CatalogCartVersionval,
                                                CatalogCartTypeDesc: CatalogCartTypeDescval,
                                                Description: Descriptionval,
                                                StatusDesc: StatusDescval,
                                                StatusID: StatusIDval
                                            }));
                                        } else {
                                            errorMsg.push('This CatalogCart has some invalid data');
                                            if (errorMsg.length > 0) {
                                                showInfoAlert('Budget Plan List', errorMsg.join(',<br/>'));
                                            }
                                        }
                                    },
                                    failure: function (response) {
                                        Ext.Msg.alert("Error verifying data structure", response);
                                    }
                                });
                            } else {
                                App.grdCatalogCartList.store.add(new ModelCatalogCartList({
                                    CatalogCartID: App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartID,
                                    CatalogCartVersion: App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartVersion,
                                    CatalogCartTypeDesc: App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartTypeDesc,
                                    Description: App.grdCatalogCartBrowse.getSelection()[i].data.Description,
                                    StatusDesc: App.grdCatalogCartBrowse.getSelection()[i].data.StatusDesc,
                                    StatusID: App.grdCatalogCartBrowse.getSelection()[i].data.StatusID
                                }));
                            }
                            
                        } else {
                            errorMsg.push('Budget Plan [' + App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartID
                                + '] Version [' + App.grdCatalogCartBrowse.getSelection()[i].data.CatalogCartVersion
                                + '] ' + '@MessageLib.exist');
                        }
                    }
                    
                    if (errorMsg.length > 0) {
                        showInfoAlert('Budget Plan List', errorMsg.join(',<br/>'));
                    }
                }
            }*@

            App.WinBrowseCatalogCart.close();
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseCatalogCart")
    .Modal(true)
    .Title(ViewBag.Title)
    .Width(iWindowWidth)
    .Items(
        X.GridPanel()
        .ID("grdCatalogCartBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionCatalogCartChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[CatalogCartVM.Prop.CatalogCartID.Name].ToString()
            + "','" + ViewData[CatalogCartVM.Prop.CatalogCartDesc.Name].ToString()
            + "');";
            oListener.ViewReady.Delay = 1; oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowse", "Cart"))
                .Reader(X.JsonReader().RootProperty("data"))
            )
            .AutoLoad(ViewData[CatalogCartVM.Prop.CatalogCartID.Name].ToString() == "" && ViewData[CatalogCartVM.Prop.CatalogCartDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.CatalogCartID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(CatalogCartVM.Prop.CatalogCartID.Desc)
            .DataIndex(Model, model => model.CatalogCartID)
            .Flex(1)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(CatalogCartVM.Prop.CatalogCartDesc.Desc)
            .DataIndex(Model, model => model.CatalogCartDesc)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(CatalogCartVM.Prop.StatusID.Desc)
            .DataIndex(Model, model => model.StatusID)
            .Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(CatalogCartVM.Prop.StatusDesc.Desc)
            .DataIndex(Model, model => model.StatusDesc)
            .Items(
                 X.ComboBox()
                    .DisplayField(StatusVM.Prop.StatusDesc.Name)
                    .ValueField(StatusVM.Prop.StatusDesc.Name)
                    .Store(
                        X.StoreForModel()
                        .Proxy(X.AjaxProxy()
                            .Url(Url.Action("/GetStatusList"))
                            .Reader(X.JsonReader().RootProperty("data"))
                        )
                        .AutoLoad(true)
                    ).Plugins(Html.X().ClearButton())

            ),
            X.DateColumn()
            .Text(CatalogCartVM.Prop.CreatedDate.Desc)
            .DataIndex(Model, model => model.CreatedDate)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)