@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model LocationVM
@{
    
    var X = Html.X();
    string sPageName = "Location";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    string sHandler = "selectLocationBrowse('" + ViewData["Control" + LocationVM.Prop.LocationID.Name]
        + "', '" + ViewData["Control" + LocationVM.Prop.LocationDesc.Name]
        + "', App.grdLocationBrowse.getRowsValues({selectedOnly:true})[0]['" + LocationVM.Prop.LocationID.Name + "']"
        + ", App.grdLocationBrowse.getRowsValues({selectedOnly:true})[0]['" + LocationVM.Prop.LocationDesc.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, null, true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdLocationBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdLocationBrowse();
        });

        resizeGrdLocationBrowse = function () {
            if (App.grdLocationBrowse != null)
                App.grdLocationBrowse.setHeight($(window).height() - App.grdLocationBrowse.getY() - (App.grdLocationBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionLocationChange = function (length) {
            App.ButtonSelectLocation.setDisabled(length < 1);
        };

        doFilter = function (filter, regionID, regionDesc) {
            filter.fields[0].items.items[0].setValue(regionID);
            filter.fields[1].items.items[0].setValue(regionDesc);
        };

        selectLocationBrowse = function (ControlLocationID, ControlLocationDesc, LocationID, LocationDesc) {
            if (Ext.getCmp(ControlLocationID) != undefined) {
                Ext.getCmp(ControlLocationID).setValue(LocationID);
                Ext.getCmp(ControlLocationID).originalValue = LocationID;
            }
            if (Ext.getCmp(ControlLocationDesc) != undefined) {
                Ext.getCmp(ControlLocationDesc).setValue(LocationDesc);
                Ext.getCmp(ControlLocationDesc).originalValue = LocationDesc;
            }
            App.WinBrowseLocation.close();
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseLocation")
    .Modal(true)
    .Title(ViewBag.Title)
    .Width(iWindowWidth)
    .Items(
        X.GridPanel()
        .ID("grdLocationBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionLocationChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[LocationVM.Prop.LocationID.Name].ToString() + "', '" + ViewData[LocationVM.Prop.LocationDesc.Name].ToString() + "');";
            oListener.ViewReady.Delay = 1;oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowse", "Location"))
                .Reader(X.JsonReader().RootProperty("data"))
            )
            .AutoLoad(ViewData[LocationVM.Prop.LocationID.Name].ToString() == "" && ViewData[LocationVM.Prop.LocationDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.LocationID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(LocationVM.Prop.LocationID.Desc)
            .DataIndex(Model, model => model.LocationID)
            .Flex(1)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(LocationVM.Prop.LocationDesc.Desc)
            .DataIndex(Model, model => model.LocationDesc)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)