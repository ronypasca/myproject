@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model FunctionsVM
@{
    
    var X = Html.X();
    string sPageName = "Function";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    string sHandler = "selectFunctionBrowse('" + ViewData["Control" + FunctionsVM.Prop.FunctionID.Name]
        + "', '" + ViewData["Control" + FunctionsVM.Prop.FunctionDesc.Name]
        + "', '" + ViewData["ControlGrdRoleFunction"]
        + "', App.grdFunctionBrowse.getRowsValues({selectedOnly:true})[0]['" + FunctionsVM.Prop.FunctionID.Name + "']"
        + ", App.grdFunctionBrowse.getRowsValues({selectedOnly:true})[0]['" + FunctionsVM.Prop.FunctionDesc.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, null, true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdFunctionBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdFunctionBrowse();
        });

        resizeGrdFunctionBrowse = function () {
            if (App.grdFunctionBrowse != null)
                App.grdFunctionBrowse.setHeight($(window).height() - App.grdFunctionBrowse.getY() - (App.grdFunctionBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionFunctionChange = function (length) {
            App.ButtonSelectFunction.setDisabled(length < 1);
        };

        doFilter = function (filter, FunctionID, FunctionDesc) {
            filter.fields[0].items.items[0].setValue(FunctionID);
            filter.fields[1].items.items[0].setValue(FunctionDesc);
        };

        selectFunctionBrowse = function (ControlFunctionID, ControlFunctionDesc, ControlGrdRoleFunction, FunctionID, FunctionDesc) {
            
            if (Ext.getCmp(ControlFunctionID) != undefined) {
                Ext.getCmp(ControlFunctionID).setValue(FunctionID);
                Ext.getCmp(ControlFunctionID).originalValue = FunctionID;
            }
            
            if (Ext.getCmp(ControlFunctionDesc) != undefined) {
                Ext.getCmp(ControlFunctionDesc).setValue(FunctionDesc);
                Ext.getCmp(ControlFunctionDesc).originalValue = FunctionDesc;
            }
            if (!Ext.isEmpty(App.NotificationTemplateID) && !Ext.isEmpty(App.NotificationTemplateDesc))
            {
                if (App.NotificationTemplateID.value != undefined && App.NotificationTemplateDesc != undefined) {
                    App.NotificationTemplateID.clear();
                    App.NotificationTemplateDesc.clear();
                }
            }
            if (Ext.getCmp(ControlGrdRoleFunction) != undefined) {
                var SelectedData = App.grdFunctionBrowse.getRowsValues({ selectedOnly: true });
                var ExistingData = Ext.getCmp(ControlGrdRoleFunction).store.data.items;
                for (var n = 0; n < SelectedData.length; n++) {
                    var Unique = true;
                    for (var x = 0; x < ExistingData.length; x++) {
                        if (ExistingData[x].data.FunctionID == SelectedData[n].FunctionID) {
                            Unique = false;
                            break;
                        }
                    }
                    if (Unique) {
                        FunctionID = SelectedData[n].FunctionID;
                        FunctionDesc = SelectedData[n].FunctionDesc;
                        Ext.getCmp(ControlGrdRoleFunction).store.add(new ModelRoleFunction({
                            FunctionID: FunctionID,
                            FunctionDesc: FunctionDesc
                        }));
                    }
                }
            }

            App.WinBrowseFunction.close();
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseFunction")
    .Modal(true)
    .Title(ViewBag.Title)
    .Width(iWindowWidth)
    .Items(
        X.GridPanel()
        .ID("grdFunctionBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionFunctionChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[FunctionsVM.Prop.FunctionID.Name].ToString() + "', '" + ViewData[FunctionsVM.Prop.FunctionDesc.Name].ToString() + "');";
            oListener.ViewReady.Delay = 1;oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowse", "Function"))
                .Reader(X.JsonReader().RootProperty("data"))
            )
            .AutoLoad(ViewData[FunctionsVM.Prop.FunctionID.Name].ToString() == "" && ViewData[FunctionsVM.Prop.FunctionDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.FunctionID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(FunctionsVM.Prop.FunctionID.Desc)
            .DataIndex(Model, model => model.FunctionID)
            .Flex(1)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(FunctionsVM.Prop.FunctionDesc.Desc)
            .DataIndex(Model, model => model.FunctionDesc)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)