@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model PreBuiltRecipientTemplateVM
@{

    var X = Html.X();
    string sPageName = "PreBuiltRecipientTemplate";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;    

    string sHandler = "selectPreBuiltRecipientTemplateBrowse('" + ViewData["Control" + PreBuiltRecipientTemplateVM.Prop.PreBuildRecTemplateID.Name]
        + "', '" + ViewData["Control" + PreBuiltRecipientTemplateVM.Prop.PreBuildDesc.Name]
        + "', '" + ViewData["ControlGrdRecipientList"]
        + "', App.grdPreBuiltRecipientTemplateBrowse.getRowsValues({selectedOnly:true})[0]['" + PreBuiltRecipientTemplateVM.Prop.PreBuildRecTemplateID.Name + "']"
        + ", App.grdPreBuiltRecipientTemplateBrowse.getRowsValues({selectedOnly:true})[0]['" + PreBuiltRecipientTemplateVM.Prop.PreBuildDesc.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, null, true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdPreBuiltRecipientTemplateBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdPreBuiltRecipientTemplateBrowse();
        });

        resizeGrdPreBuiltRecipientTemplateBrowse = function () {
            if (App.grdPreBuiltRecipientTemplateBrowse != null)
                App.grdPreBuiltRecipientTemplateBrowse.setHeight($(window).height() - App.grdPreBuiltRecipientTemplateBrowse.getY() - (App.grdPreBuiltRecipientTemplateBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionPreBuiltRecipientTemplateChange = function (length) {
            App.ButtonSelectPreBuiltRecipientTemplate.setDisabled(length < 1);
        };

        doFilter = function (filter, PreBuildRecTemplateID, PreBuildDesc) {
            filter.fields[0].items.items[0].setValue(PreBuildRecTemplateID);
            filter.fields[1].items.items[0].setValue(PreBuildDesc);
        };

        selectPreBuiltRecipientTemplateBrowse = function (ControlPreBuildRecTemplateID, ControlPreBuildDesc, GrdScheduleRecipient, PreBuildRecTemplateID, PreBuildDesc) {
            if (Ext.getCmp(ControlPreBuildRecTemplateID) != undefined) {
                Ext.getCmp(ControlPreBuildRecTemplateID).setValue(PreBuildRecTemplateID);
                Ext.getCmp(ControlPreBuildRecTemplateID).originalValue = PreBuildRecTemplateID;
            }
            if (Ext.getCmp(ControlPreBuildDesc) != undefined) {
                Ext.getCmp(ControlPreBuildDesc).setValue(PreBuildDesc);
                Ext.getCmp(ControlPreBuildDesc).originalValue = PreBuildDesc;
            }
            if (GrdScheduleRecipient.length > 0) {
                gridRecipient = GrdScheduleRecipient.split(',');

                var RecpList = App.grdPreBuiltRecipientTemplateBrowse.getRowsValues({ selectedOnly: true })[0].LstRecipient;
                
                var SelectedData = RecpList;

                for (var n = 0; n < SelectedData.length; n++) {
                        
                        
                    for (var i = 0; i < gridRecipient.length; i++) {
                            
                        var ExistingData = Ext.getCmp(gridRecipient[i]).store.data.items;
                           
                        if(gridRecipient[i].includes("BCC"))
                            type = @((int)RecipientTypes.BCC);
                        else if (gridRecipient[i].includes("CC")) 
                            type = @((int)RecipientTypes.CC);                        
                        else
                            type = @((int)RecipientTypes.TO);
                        

                        if(type == SelectedData[n].RecipientTypeID){
                            var Unique = true;
                            for (var x = 0; x < ExistingData.length; x++) {
                                if (ExistingData[x].data.MailAddress == SelectedData[n].MailAddress &&
                                    ExistingData[x].data.OwnerID == SelectedData[n].UserID &&
                                    ExistingData[x].data.RecipientNRK == SelectedData[n].EmployeeID) {
                                    Unique = false;
                                    break;
                                }
                            }
                            if (Unique) {
                                Ext.getCmp(gridRecipient[i]).store.add(new ModelRecipientList({
                                    OwnerID: SelectedData[n].UserID,
                                    RecipientNRK: SelectedData[n].EmployeeID,
                                    RecipientDesc: SelectedData[n].EmployeeName,
                                    RecipientTypeID: SelectedData[n].RecipientTypeID,
                                    MailAddress: SelectedData[n].MailAddress
                                }));
                            }
                        }
                        Ext.getCmp(gridRecipient[i]).store.loadPage(1);
                    }
                }

            }
            App.WinBrowsePreBuiltRecipientTemplate.close();
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowsePreBuiltRecipientTemplate")
    .Modal(true)
    .Title("Pre-Built Recipient")
    .Width(iWindowWidth)
    .Constrain(true)
    .Items(
        X.GridPanel()
        .ID("grdPreBuiltRecipientTemplateBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Single)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionPreBuiltRecipientTemplateChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[PreBuiltRecipientTemplateVM.Prop.PreBuildRecTemplateID.Name].ToString() + "', '" + ViewData[PreBuiltRecipientTemplateVM.Prop.PreBuildDesc.Name].ToString() + "');";
            oListener.ViewReady.Delay = 1;oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowse", "PreBuiltRecipient"))
                .Reader(X.JsonReader().RootProperty("data"))
                .ExtraParams(exParam =>
                        exParam.AddRange(new Parameter[]{
                            new Parameter()
                            {
                                Name = FunctionsVM.Prop.FunctionID.Name,
                                Value = ViewData[FunctionsVM.Prop.FunctionID.Name].ToString(),
                                Mode = ParameterMode.Value,
                                Encode = false
                            }
                        })
                    )
            )
            .AutoLoad(ViewData[PreBuiltRecipientTemplateVM.Prop.PreBuildRecTemplateID.Name].ToString() == "" && ViewData[PreBuiltRecipientTemplateVM.Prop.PreBuildDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.PreBuildRecTemplateID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(PreBuiltRecipientTemplateVM.Prop.PreBuildRecTemplateID.Desc)
            .DataIndex(Model, model => model.PreBuildRecTemplateID)
            .Flex(1).Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text("PreBuilt "+PreBuiltRecipientTemplateVM.Prop.PreBuildDesc.Desc)
            .DataIndex(Model, model => model.PreBuildDesc)
            .Flex(1)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text("Recipients")
            .DataIndex(Model, model => model.Recipients)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)