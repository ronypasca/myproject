@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model List<ApprovalDelegationUserVM>   
@{
    var X = Html.X();
    var iBodyPadding = 10;
    var sToolbarPaddingSpec = "0 10 10 0";
    var iLabelWidth = 175;
    var iFieldWidth = 420;
    int iGridMinHeight = 250;
    int iPageSize = 30;
    List<Parameter> oParamList;
    Parameter oParam;
    oParamList = new List<Parameter>();

    oParam = new Parameter("GridCaller", "grdApprovalDelegationUser", ParameterMode.Value, false);
    oParamList.Add(oParam);
    oParam = new Parameter("ControllerCaller", "ApprovalDelegation", ParameterMode.Value, false);
    oParamList.Add(oParam);

    Button.Builder btnAddDelegationUser = global_asax.Button(Buttons.ButtonAdd, "Delegation", "Add", "../User/" + General.EnumDesc(Buttons.ButtonBrowse), true, false, false, null, oParamList);
    Button.Builder btnDeleteDelegationUser = global_asax.Button(Buttons.ButtonDelete, "Delegation", "Delete", "", true);
    Button.Builder btnBrowseDelegationUser = global_asax.Button(Buttons.ButtonBrowse, "DelegationUser", "", "../ApprovalDelegation/BrowseDelegationUser", true, false, false, null, oParamList);
    bool isReadOnly = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail) || ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonUpdate);
    <script>
        resizeGrdApprovalDelegationUser = function () {
            if (App.grdApprovalDelegationUser != null)
                App.grdApprovalDelegationUser.setHeight($(window).height() - App.grdApprovalDelegationUser.getY() - (App.grdApprovalDelegationUser.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionChange_DU = function (length) {
            var readonly_ = @isReadOnly;
            debugger;
            App.ButtonDeleteDelegation.setDisabled(length != 1 || readonly_);
            App.ButtonAddDelegation.setDisabled(readonly_);
        };

        deleteUserDelegation= function () {
            App.grdApprovalDelegationUser.getStore().remove(App.grdApprovalDelegationUser.getSelectionModel().getSelection());
        };

        getListUserDelegation = function () {
            var data = [];
            for (var x in App.grdApprovalDelegationUser.store.data.items) {
                var take = App.grdApprovalDelegationUser.store.data.items[x].data;
                data.push(take);
            }
            return data;
        };
    </script>
}

@(
        X.GridPanel()
            .ID("grdApprovalDelegationUser")
            .Padding(iBodyPadding)
            .MinHeight(iGridMinHeight)
            .SelectionModel(
                X.RowSelectionModel()
                .Mode(SelectionMode.Multi)
                .AllowDeselect(true)
            )
            .Listeners(oListener =>
            {
                oListener.SelectionChange.Handler = "selectionChange_DU(selected.length)";
            })
            .Store(
                X.Store()
                .AutoLoad(true)
                .RemoteSort(true)
                .RemotePaging(true)
                .RemoteFilter(true)
                .PageSize(iPageSize)
                .DataSource(Model)
                .Model(
                    X.Model()
                    .Name("ModelDelegationUser")
                    .Fields(
                        //X.ModelField().Name(Model, model => model.ApprovalDelegationuserID),
                        //X.ModelField().Name(Model, model => model.ApprovalDelegateID),
                        X.ModelField().Name(Model, model => model.DelegateUserID),
                        X.ModelField().Name(Model, model => model.DelegateTo)
                    )
                )
                .SorterFor(Model, model => model.PeriodStart, Ext.Net.SortDirection.ASC)
            )
            .ColumnModel(
                X.Column()
                .Text("Name")
                .DataIndex(Model, model => model.DelegateTo)
                .Hidden(false)
                .Flex(1)
                .Items(
                    X.Container()
                    .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                    .Layout(LayoutType.HBox)
                    .Items(
                        X.TextField()
                        .Flex(1)
                        .Listeners(oListener =>
                        {
                            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                        })
                    )
                )
            )
            .Plugins(
                X.FilterHeader()
                .Remote(true)
            )
            .TopBar(
                X.Toolbar()
                .PaddingSpec(sToolbarPaddingSpec)
                .Items(
                    btnAddDelegationUser.Disabled(isReadOnly),
                    btnDeleteDelegationUser.Disabled(true).Handler("deleteUserDelegation()")
                )
            )
            .BottomBar(
                X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
            )


)

