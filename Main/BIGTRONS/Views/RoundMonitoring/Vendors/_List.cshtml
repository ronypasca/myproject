@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model List<FPTVendorParticipantsVM>
@{

    var X = Html.X();
    string sPageName = "Home";
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;
    List<Parameter> oParamList;
    Parameter oParam;

    //Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, sPageName, null, null, true, false, false, Buttons.ButtonList);

    //oParamList = new List<Parameter>();
    //oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdVendorParticipant.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    //oParamList.Add(oParam);
    //Button.Builder btnDetail = global_asax.Button(Buttons.ButtonDetail, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    //oParamList = new List<Parameter>();
    //oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdVendorParticipant.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    //oParamList.Add(oParam);
    //Button.Builder btnUpdate = global_asax.Button(Buttons.ButtonUpdate, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    //oParamList = new List<Parameter>();
    //oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdVendorParticipant.getRowsValues({selectedOnly:true})", ParameterMode.Raw, true);
    //oParamList.Add(oParam);
    //Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, null, true, false, false, null, oParamList, null, "deleteSuccess()");

    <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizegrdVendorParticipant()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizegrdVendorParticipant();
        });

        resizegrdVendorParticipant = function () {
            if (App.grdVendorParticipant != null)
                App.grdVendorParticipant.setHeight($(window).height() - App.grdVendorParticipant.getY() - (App.grdVendorParticipant.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        
        viewReadyVendorParticipant = function(grid){
            grid.getStore().load();
        };

        afterRenderVendorParticipant = function(grid){
            var me = this;
            grid.store.on('load', function(){
                var data = me.getStore().data.items;
                var recs = [];
                Ext.each(data, function(item, index){
                    if (item.data.Checked) {
                        recs.push(item);
                    }
                });
                me.getSelectionModel().select(recs);
            })
        };
    </script>
}
@(
    X.GridPanel()
    .ID("grdVendorParticipant")
    .Padding(iBodyPadding)
    .MinHeight(iGridMinHeight)
    .SelectionModel(
        X.CheckboxSelectionModel()
        .Mode(SelectionMode.Simple)
        .AllowDeselect(true)
    )
    .Listeners(oListener =>
    {
        //oListener.SelectionChange.Fn = "selectionChangeMenuAction";
        oListener.AfterRender.Fn = "afterRenderVendorParticipant";
        oListener.ViewReady.Fn = "viewReadyVendorParticipant";
        //oListener.BeforeSelect.Fn = "beforeSelectMenuAction";
    })
    .Store(
           X.Store()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadVendorParticipant"))
                .Reader(X.JsonReader().RootProperty("data"))
            )
            .Parameters(p =>
                p.Add(new StoreParameter(FPTVM.Prop.FPTID.Name, "App.FPTID.getValue()", ParameterMode.Raw))
            )
            .AutoLoad(false)
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .DataSource(Model)
            //.SorterFor(Model, model => model.TCAppliedID, Ext.Net.SortDirection.ASC)
            .Model(
                X.Model()
                .Name("ModelMenuAction")
                .Fields(
                    X.ModelField().Name(Model, model => model.FPTVendorParticipantID),
                    X.ModelField().Name(Model, model => model.VendorID),
                    X.ModelField().Name(Model, model => model.VendorName)
                )
            )
        )
    .ColumnModel(
        X.Column()
        .Text(FPTVendorParticipantsVM.Prop.VendorID.Desc)
        .DataIndex(Model, model => model.VendorID)
        .Hidden(true)
        .Flex(1)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(FPTVendorParticipantsVM.Prop.VendorName.Desc)
        .DataIndex(Model, model => model.VendorName)
        .Flex(1)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        )
    )
    .Plugins(
        X.FilterHeader()
        .Remote(true)
    )
    .BottomBar(
        X.PagingToolbar()
        .DisplayInfo(true)
        .BaseCls("paging")
        .DisplayMsg("Displaying {0} - {1} of {2}")
        .EmptyMsg("No records to display")
    )
)