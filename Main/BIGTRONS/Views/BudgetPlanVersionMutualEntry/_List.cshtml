@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model BudgetPlanVersionVendorVM
@{
    var X = Html.X();
    string sPageName = "Home";
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;
    List<Parameter> oParamList;
    Parameter oParam;

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdBudgetPlanVersionEntry.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDetail = global_asax.Button(Buttons.ButtonDetail, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdBudgetPlanVersionEntry.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnUpdate = global_asax.Button(Buttons.ButtonUpdate, sPageName, "Entry", null, true, false, false, Buttons.ButtonList, oParamList);

    Button.Builder btnVerify = global_asax.Button(Buttons.ButtonVerify, sPageName, null, string.Empty, true);

    Button.Builder btnUnverify = global_asax.Button(Buttons.ButtonUnverify, sPageName, null, string.Empty, true);


    /**
     *
     * Verify & Unverify Script
     * 
     */
    <script>
        showMsgConfirmVerify= function(){
            Ext.Msg.show({
                message: "You're going to verify current Budget Plan.</br>Do you want to continue?",
                buttons:Ext.MessageBox.YESNO,
                fn: "verifyConfirm"
            });
            return;
        };

        verifyConfirm= function(btn){
            if (btn == "yes") {
                /* */
                Ext.getBody().mask('Loading');
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Verify", "BudgetPlanVersionEntry"))',
                    params: {
                        Selected: App.grdBudgetPlanVersionEntry.getRowsValues({ selectedOnly: true })
                    },
                    callback:function(){
                        App.grdBudgetPlanVersionEntry.getStore().reload();
                        Ext.getBody().unmask();
                    }
                });
            }
        };

        showMsgConfirmUnverify= function(){
            Ext.Msg.show({
                message: "You're going to Un-verify current Budget Plan.</br>"+
                         "Do you want to continue?",
                buttons:Ext.MessageBox.YESNO,
                fn: "unverifyConfirm"
            });
            return;
        };

        unverifyConfirm= function(btn){
            if (btn == "yes") {
                /* */
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("UnVerify", "BudgetPlanVersionEntry"))',
                    params: {
                        Selected: App.grdBudgetPlanVersionEntry.getRowsValues({ selectedOnly: true })
                    },
                    callback:function(){
                        App.grdBudgetPlanVersionEntry.getStore().reload();
                    }
                });
            }
        };
    </script>

    <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdBudgetPlanVersionEntry()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdBudgetPlanVersionEntry();
        });

        resizeGrdBudgetPlanVersionEntry = function () {
            if (App.grdBudgetPlanVersionEntry != null)
                App.grdBudgetPlanVersionEntry.setHeight($(window).height() - App.grdBudgetPlanVersionEntry.getY() - (App.grdBudgetPlanVersionEntry.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionChange = function (length) {
            App.ButtonDetailHome.setDisabled(length == 0);
            App.ButtonUpdateHome.setDisabled(length == 0);
            App.ButtonUnverifyHome.setDisabled(length == 0);
            App.ButtonVerifyHome.setDisabled(length == 0);
        };

        deleteSuccess = function () {
            App.grdBudgetPlanVersionEntry.getStore().reload();
        };

        reloadGrid = function () {
            App.grdBudgetPlanVersionEntry.store.load();
        };
    </script>
}
@(
    X.GridPanel()
    .ID("grdBudgetPlanVersionEntry")
    .Padding(iBodyPadding)
    .MinHeight(iGridMinHeight)
    .SelectionModel(
        X.RowSelectionModel()
        .Mode(SelectionMode.Multi)
        .AllowDeselect(true)
    )
    .Listeners(oListener =>
    {
        oListener.SelectionChange.Handler = "selectionChange(selected.length)";
    })
    .Store(
        X.StoreForModel()
        .Proxy(
            X.AjaxProxy()
            .Url(Url.Action("Read"))
            .Reader(X.JsonReader().RootProperty("data"))
        )
        .AutoLoad(true)
        .RemoteSort(true)
        .RemotePaging(true)
        .RemoteFilter(true)
        .PageSize(iPageSize)
        .SorterFor(Model, model => model.BudgetPlanID, Ext.Net.SortDirection.ASC)
    )
    .ColumnModel(
        X.Column()
        .Text(BudgetPlanVersionVendorVM.Prop.BudgetPlanID.Desc)
        .DataIndex(Model, model => model.BudgetPlanID)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(3)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Hidden(true)
        .DataIndex(Model, model => model.BudgetPlanVersionVendorID),
        X.Column()
        .Hidden(true)
        .DataIndex(Model, model => model.FeePercentage),
        X.Column()
        .Hidden(true)
        .DataIndex(Model, model => model.BudgetPlanVersionPeriodID),
        X.Column()
        .Hidden(true)
        .DataIndex(Model, model => model.BudgetPlanVersion),
        X.Column()
        .Text(BudgetPlanVersionVendorVM.Prop.Description.Desc)
        .DataIndex(Model, model => model.Description)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVersionVendorVM.Prop.BudgetPlanTemplateDesc.Desc)
        .DataIndex(Model, model => model.BudgetPlanTemplateDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVersionVendorVM.Prop.ProjectDesc.Desc)
        .DataIndex(Model, model => model.ProjectDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVersionVendorVM.Prop.ClusterDesc.Desc)
        .DataIndex(Model, model => model.ClusterDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(BudgetPlanVersionVendorVM.Prop.UnitTypeDesc.Desc)
        .DataIndex(Model, model => model.UnitTypeDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ), X.Column()
        .Text(BudgetPlanVersionVendorVM.Prop.VendorDesc.Desc)
        .DataIndex(Model, model => model.VendorDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
            X.DateColumn()
            .Text(BudgetPlanVersionVendorVM.Prop.StartDate.Desc)
            .DataIndex(Model, model => model.StartDate)
            .Flex(3)
            .MinWidth(100)
            .Format(global_asax.DefaultDateTimeFormat)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueDateTimeRange", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.DateField()
                    .Flex(1)
                    .Format(global_asax.DefaultDateTimeFormat)
                    .HideTrigger(true)
                    .Listeners(oListener =>
                    {
                        oListener.Blur.Handler = "this.triggerEl.hide();";
                        oListener.Focus.Handler = "this.triggerEl.show();";
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    }),
                    X.DateField()
                    .Flex(1)
                    .Format(global_asax.DefaultDateTimeFormat)
                    .HideTrigger(true)
                    .Listeners(oListener =>
                    {
                        oListener.Blur.Handler = "this.triggerEl.hide();";
                        oListener.Focus.Handler = "this.triggerEl.show();";
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.DateColumn()
            .Text(BudgetPlanVersionVendorVM.Prop.EndDate.Desc)
            .DataIndex(Model, model => model.EndDate)
            .Flex(3)
            .MinWidth(100)
            .Format(global_asax.DefaultDateTimeFormat)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueDateTimeRange", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.DateField()
                    .Flex(1)
                    .Format(global_asax.DefaultDateFormat)
                    .HideTrigger(true)
                    .Listeners(oListener =>
                    {
                        oListener.Blur.Handler = "this.triggerEl.hide();";
                        oListener.Focus.Handler = "this.triggerEl.show();";
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    }),
                    X.DateField()
                    .Flex(1)
                    .Format(global_asax.DefaultDateFormat)
                    .HideTrigger(true)
                    .Listeners(oListener =>
                    {
                        oListener.Blur.Handler = "this.triggerEl.hide();";
                        oListener.Focus.Handler = "this.triggerEl.show();";
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
        .Text(BudgetPlanVersionVendorVM.Prop.StatusDesc.Desc)
        .DataIndex(Model, model => model.StatusDesc)
        .Flex(2)
        .Items(
            X.ComboBox()
                    .DisplayField(StatusVM.Prop.StatusDesc.Name)
                    .ValueField(StatusVM.Prop.StatusDesc.Name)
                    .Store(
                        X.StoreForModel()
                        .Proxy(X.AjaxProxy()
                            .Url(Url.Action("/GetStatusList"))
                            .Reader(X.JsonReader().RootProperty("data"))
                        )
                        .AutoLoad(true)
                    ).Plugins(Html.X().ClearButton())
        )
    )
    .Plugins(
        X.FilterHeader()
        .Remote(true)
    )
    .TopBar(
        X.Toolbar()
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
            btnDetail.Disabled(true),
            btnUpdate.Disabled(true),
            btnVerify.Disabled(true).Handler("showMsgConfirmVerify()"),
            btnUnverify.Disabled(true).Handler("showMsgConfirmUnverify()")
        )
    )
    .BottomBar(
        X.PagingToolbar()
        .DisplayInfo(true)
        .BaseCls("paging")
        .DisplayMsg("Displaying {0} - {1} of {2}")
        .EmptyMsg("No records to display")
    )
)