@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model SchedulesVM
@{

    var X = Html.X();
    string sPageName = "Schedules";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    string sHandler = "selectSchedulesBrowse('" + ViewData["Control" + SchedulesVM.Prop.ScheduleID.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.Subject.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.StartDate.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.EndDate.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.Location.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.Notes.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.FPTID.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.FPTDescription.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.FunctionID.Name]
        + "', '" + ViewData["Control" + SchedulesVM.Prop.FunctionDescription.Name]
        + "', App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.ScheduleID.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.Subject.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.StartDate.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.EndDate.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.Location.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.Notes.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.FPTID.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.FPTDescription.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.FunctionID.Name + "']"
        + ", App.grdSchedulesBrowse.getRowsValues({selectedOnly:true})[0]['" + SchedulesVM.Prop.FunctionDescription.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, "", true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdSchedulesBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdSchedulesBrowse();
        });

        resizeGrdSchedulesBrowse = function () {
            if (App.grdSchedulesBrowse != null)
                App.grdSchedulesBrowse.setHeight($(window).height() - App.grdSchedulesBrowse.getY() - (App.grdSchedulesBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionSchedulesChange = function (length) {
            App.ButtonSelectSchedules.setDisabled(length < 1);
        };

        doFilter = function (filter, SchedulesID, SchedulesDesc) {
            filter.fields[0].items.items[0].setValue(SchedulesID);
            filter.fields[1].items.items[0].setValue(SchedulesDesc);
        };

        selectSchedulesBrowse = function (ControlSchedulesID, ControlSchedulesDesc, ControlStartDate, ControlEndDate, ControlLocation,ControlNotes,ControlFPTID, ControlFPTDescription,ControlFunctionID,ControlFunctionDescription,
            SchedulesID, SchedulesDesc, StartDate, EndDate,Location,Notes,FPTID,FPTDescription,FunctionID,FunctionDesc) {
            if (Ext.getCmp(ControlSchedulesID) != undefined) {
                Ext.getCmp(ControlSchedulesID).setValue(SchedulesID);
                Ext.getCmp(ControlSchedulesID).originalValue = SchedulesID;
            }
            if (Ext.getCmp(ControlSchedulesDesc) != undefined) {
                Ext.getCmp(ControlSchedulesDesc).setValue(SchedulesDesc);
                Ext.getCmp(ControlSchedulesDesc).originalValue = SchedulesDesc;
            }

            if (Ext.getCmp(ControlStartDate) != undefined) {
                Ext.getCmp(ControlStartDate).setValue(StartDate);
                Ext.getCmp(ControlStartDate).originalValue = StartDate;
            }

            if (Ext.getCmp(ControlEndDate) != undefined) {
                Ext.getCmp(ControlEndDate).setValue(EndDate);
                Ext.getCmp(ControlEndDate).originalValue = EndDate;
            }

            if (Ext.getCmp(ControlLocation) != undefined) {
                Ext.getCmp(ControlLocation).setValue(Location);
                Ext.getCmp(ControlLocation).originalValue = Location;
            }

            if (Ext.getCmp(ControlNotes) != undefined) {
                Ext.getCmp(ControlNotes).setValue(Notes);
                Ext.getCmp(ControlNotes).originalValue = Notes;
            }

            if (Ext.getCmp(ControlFPTID) != undefined) {
                Ext.getCmp(ControlFPTID).setValue(FPTID);
                Ext.getCmp(ControlFPTID).originalValue = FPTID;
            }

            if (Ext.getCmp(ControlFPTDescription) != undefined) {
                Ext.getCmp(ControlFPTDescription).setValue(FPTDescription);
                Ext.getCmp(ControlFPTDescription).originalValue = FPTDescription;
            }

            if (Ext.getCmp(ControlFunctionID) != undefined) {
                Ext.getCmp(ControlFunctionID).setValue(FunctionID);
                Ext.getCmp(ControlFunctionID).originalValue = FunctionID;
            }

            if (Ext.getCmp(ControlFunctionDescription) != undefined) {
                Ext.getCmp(ControlFunctionDescription).setValue(FunctionDesc);
                Ext.getCmp(ControlFunctionDescription).originalValue = FunctionDesc;
            }

            App.WinBrowseSchedules.close();
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseSchedules")
    .Modal(true)
    .Title(ViewBag.Title)
    .Width(iWindowWidth)
    .Items(
        X.GridPanel()
        .ID("grdSchedulesBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionSchedulesChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[SchedulesVM.Prop.ScheduleID.Name].ToString() + "', '" + ViewData[SchedulesVM.Prop.Subject.Name].ToString() + "');";
            oListener.ViewReady.Delay = 1;oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowse", "Scheduling"))
                .Reader(X.JsonReader().RootProperty("data"))
                .ExtraParams(ep =>
                        ep.AddRange(new Parameter[]{
                            new Parameter()
                            {
                                Name = BusinessUnitVM.Prop.BusinessUnitID.Name,
                                Value = ViewData[BusinessUnitVM.Prop.BusinessUnitID.Name] == null ? string.Empty : ViewData[BusinessUnitVM.Prop.BusinessUnitID.Name].ToString(),
                                Mode = ParameterMode.Value,
                                Encode = false
                            }
                        })
                    )
            )
            .AutoLoad(ViewData[SchedulesVM.Prop.ScheduleID.Name].ToString() == "" && ViewData[SchedulesVM.Prop.Subject.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.ScheduleID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(SchedulesVM.Prop.ScheduleID.Desc)
            .DataIndex(Model, model => model.ScheduleID)
            .Flex(1)
            .Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(SchedulesVM.Prop.Subject.Desc)
            .DataIndex(Model, model => model.Subject)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
            ,
            X.DateColumn()
            .Text(SchedulesVM.Prop.StartDate.Desc)
            .DataIndex(Model, model => model.StartDate)
            .Flex(3)
            .Format(global_asax.DefaultDateTimeFormat)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.DateColumn()
            .Text(SchedulesVM.Prop.EndDate.Desc)
            .DataIndex(Model, model => model.EndDate)
            .Flex(3)
            .Format(global_asax.DefaultDateTimeFormat)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(SchedulesVM.Prop.Location.Desc)
            .DataIndex(Model, model => model.Location)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(SchedulesVM.Prop.Notes.Desc)
            .DataIndex(Model, model => model.Location)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)