@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model ItemVM
@{

    var X = Html.X();
    string sPageName = "Home";
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;
    /*bool IsDetailPage = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);
    */
    List<Parameter> oParamList;
    Parameter oParam;

    Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, sPageName, null, null, true, false, false, Buttons.ButtonList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdItem.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDetail = global_asax.Button(Buttons.ButtonDetail, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdItem.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnUpdate = global_asax.Button(Buttons.ButtonUpdate, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdItem.getRowsValues({selectedOnly:true})", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, null, true, false, false, null, oParamList, null, "deleteFinish(true)", "deleteFinish(false, result.errorMessage)");

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdItem.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDownload = global_asax.Button(Buttons.ButtonDownload, sPageName, "Download Template", string.Empty, true);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdItem.getRowsValues({selectedOnly:true})", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnUpload = global_asax.Button(Buttons.ButtonRollUp, sPageName, "Upload", "/Upload", true, false, false,Buttons.ButtonList, oParamList);

    <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdItem()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdItem();
        });

        reloadGridItem = function () {
            var records = App.grdItem.getSelectionModel().getSelection();
            
            if(records.length>0)
                App.grdItem.getStore().reload({
                    callback: function () {
                        var recs = [];
                        Ext.each(records, function(item, index){
                            recs.push(item);
                        });
                        App.grdItem.getSelectionModel().select(recs);
                    },
                    scope: App.grdItem
                });
            else
                App.grdItem.getStore().reload();
        };

        resizeGrdItem = function () {
            if (App.grdItem != null)
                App.grdItem.setHeight($(window).height() - App.grdItem.getY() - (App.grdItem.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionChange = function (length) {
            App.ButtonDetailHome.setDisabled(length != 1);
            App.ButtonUpdateHome.setDisabled(length != 1);
        };

        deleteFinish = function (success, msg) {
            if (success)
                App.grdItem.getStore().reload();
            else
                showError(sTitle, msg);
        };

        deleteSuccess = function (success, msg) {
            if (success)
                App.grdItem.getStore().reload();
            else
                showError(sTitle, msg);
        };

        download =  function (){
            Ext.getBody().mask("Please wait...");
            Ext.Ajax.request({
                url: '@(Url.Action("GetTemplateWithData", "ItemCatalog"))',
                method: 'POST',
                cache:false,
                params: { Caller: "Download" },
                success: function (data){
                    Ext.getBody().unmask();
                    var response = JSON.parse(data.responseText).result;
                    
                    window.location = 'ItemCatalog/Download?fileGuid=' + response.Data.FileGuid 
                                      + '&filename=' + response.Data.FileName;
                }
            });
            return;
        }
    </script>
}
@(
    X.GridPanel()
    .ID("grdItem")
    .Padding(iBodyPadding)
    .MinHeight(iGridMinHeight)
    .SelectionModel(
        X.RowSelectionModel()
        .Mode(SelectionMode.Multi)
        .AllowDeselect(true)
    )
    .Listeners(oListener =>
    {
        oListener.SelectionChange.Handler = "selectionChange(selected.length)";
    })
    .Store(
        X.StoreForModel()
        .Proxy(
            X.AjaxProxy()
            .Url(Url.Action("Read"))
            .Reader(X.JsonReader().RootProperty("data"))
        )
        .AutoLoad(true)
        .RemoteSort(true)
        .RemotePaging(true)
        .RemoteFilter(true)
        .PageSize(iPageSize)
        .SorterFor(Model, model => model.ItemID, Ext.Net.SortDirection.ASC)
    )
    .ColumnModel(
        X.Column()
        .Text(ItemVM.Prop.ItemID.Desc)
        .DataIndex(Model, model => model.ItemID)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(ItemVM.Prop.ItemDesc.Desc)
        .DataIndex(Model, model => model.ItemDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(ItemVM.Prop.ItemTypeDesc.Desc)
        .DataIndex(Model, model => model.ItemTypeDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(ItemVM.Prop.ItemGroupDesc.Desc)
        .DataIndex(Model, model => model.ItemGroupDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(ItemVM.Prop.UoMDesc.Desc)
        .DataIndex(Model, model => model.UoMDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.CheckColumn()
        .Text(ItemVM.Prop.IsActive.Desc)
        .DataIndex(Model, model => model.IsActive)
        .Flex(1)
        
        .Items(
                X.ComboBox()
                .DisplayField(ConfigBoolVM.Prop.Description.Name)
                .ValueField(ConfigBoolVM.Prop.ID.Name)
                .Store(
                        X.StoreForModel()
                        .Proxy(X.AjaxProxy()
                            .Url(Url.Action("../Config/GetBoolList"))
                            .Reader(X.JsonReader().RootProperty("data"))
                        )
                        .AutoLoad(true)
                     )

        )
    )
    .Plugins(
        X.FilterHeader()
        .Remote(true)
    )
    .TopBar(
        X.Toolbar()
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
            //btnAdd.Disabled(false),
            btnDetail.Disabled(true),
            btnUpdate.Disabled(true),
            //btnDelete.Disabled(true),
            btnDownload.Handler("download"),
            btnUpload
        )
    )
    .BottomBar(
        X.PagingToolbar()
        .DisplayInfo(true)
        .BaseCls("paging")
        .DisplayMsg("Displaying {0} - {1} of {2}")
        .EmptyMsg("No records to display")
    )
)