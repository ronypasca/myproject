@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model List<BudgetPlanVersionVendorVM>
@{
    var X = Html.X();
    string sPageName = "BudgetPlanVersionVendor";
    string sToolbarPaddingSpec = "0 10 10 0";
    int iGridMinHeight = 350;
    int iBodyPadding = 10;
    int iPageSize = 30;
    
    bool isDisableButton = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);

    List<Parameter> oParamList;
    Parameter oParam;


    Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, sPageName, null, string.Empty,true);

    oParamList = new List<Parameter>();
    oParam = new Parameter("Selected", "App.grdBudgetPlanVersionVendor.getSelection()[0].data", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, "DeleteVendorItem", true, false, false, null, oParamList, null, "deleteFinish");


    oParamList = new List<Parameter>();
    oParam = new Parameter();
    oParam = new Parameter("Control" + BudgetPlanVersionVendorVM.Prop.VendorID.Name, BudgetPlanVersionVendorVM.Prop.VendorID.Name, ParameterMode.Value, false);
    oParamList.Add(oParam);
    oParam = new Parameter("Control" + BudgetPlanVersionVendorVM.Prop.VendorDesc.Name, BudgetPlanVersionVendorVM.Prop.VendorDesc.Name, ParameterMode.Value, false);
    oParamList.Add(oParam);
    Button.Builder btnBrowseVendor = global_asax.Button(Buttons.ButtonBrowse, "Vendor", "", "../Vendor/" + General.EnumDesc(Buttons.ButtonBrowse), true, false, false, null, oParamList);
    Button.Builder btnEraseVendor = global_asax.Button(Buttons.ButtonErase, "Vendor", "", "", true);

    var hdnTextFieldVendorID = X.Hidden().ID(BudgetPlanVersionVendorVM.Prop.VendorID.Name);
    var hdnTextFieldVendorDesc = X.Hidden().ID(BudgetPlanVersionVendorVM.Prop.VendorDesc.Name);

    <script>

        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdBudgetPlanVersionVendor()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdBudgetPlanVersionVendor();
        });

        resizeGrdBudgetPlanVersionVendor = function () {
            if (App.grdBudgetPlanVersionVendor != null)
                App.grdBudgetPlanVersionVendor.updateLayout();
               App.grdBudgetPlanVersionVendor.setHeight($(window).height() - App.grdBudgetPlanVersionVendor.getY() - (App.grdBudgetPlanVersionVendor.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionChange= function (length) {
            App.ButtonDeleteBudgetPlanVersionVendor.setDisabled(length < 1);
        };

        setVendorID = function (rowIndex) {
            var value = App.VendorID.getValue();
            if (value != null && value != "") {

                var record = App.grdBudgetPlanVersionVendor.store.getAt(rowIndex);
                record.set('VendorID', value);

                record.commit();
                App.VendorID.clear();
            }
        }; 
        setVendorDesc = function (rowIndex) {
            var value = App.VendorDesc.getValue();
            if (value != null && value != "") {

                var record = App.grdBudgetPlanVersionVendor.store.getAt(rowIndex);
                record.set('VendorDesc', value);

                record.commit();
                App.VendorDesc.clear();
            }
        };
        setStartDate = function (rowIndex) {
            var value = App.StartDate.getValue();
            if (value != null && value != "") {

                var record = App.grdBudgetPlanVersionVendor.store.getAt(rowIndex);
                record.set('StartDate', value);

                record.commit();
                App.StartDate.clear();
            }
        };
        setEndDate = function (rowIndex) {
            var value = App.EndDate.getValue();
            if (value != null && value != "") {

                var record = App.grdBudgetPlanVersionVendor.store.getAt(rowIndex);
                record.set('EndDate', value);

                record.commit();
                App.EndDate.clear();
            }
        };

        addBudgetPlanVendorVersion = function(){
            var noEmpty = true;
            for(var c = 0;c<App.grdBudgetPlanVersionVendor.store.data.items.length;c++){
                var dataList = App.grdBudgetPlanVersionVendor.store.data.items[c].data;
                console.log(dataList);
                if(dataList.VendorID == "" || dataList.StartDateHours == "" || dataList.StartDate == "" || dataList.EndDateHours == "" || dataList.EndDate ==""){
                    noEmpty = false;
                    break;
                }
            }
            if(noEmpty){
                App.grdBudgetPlanVersionVendor.store.add(new ModelBudgetPlanVersionVendor({
                    BudgetPlanVersionPeriodID: App.grdBudgetPlanVersionPeriod.getRowsValues({selectedOnly:true})[0].BudgetPlanVersionPeriodID,
                    VendorID: "",
                    VendorDesc: "",
                    StartDate: "",
                    StartDateHours: "",
                    StartHours: "",
                    EndDate:"",
                    EndDateHours:"",
                    EndHours:""
                }));
                App.grdBudgetPlanVersionVendor.editingPlugin.startEditByPosition({ row: App.grdBudgetPlanVersionVendor.getStore().data.length-1, column: 0 });
                setCheckAllRecord(App.grdBudgetPlanVersionVendor.store.data.items[App.grdBudgetPlanVersionVendor.getStore().data.length-1],App.grdBudgetPlanVersionVendor.getStore().data.length-1);

            }else{
                Ext.Msg.alert("Warning","Please fill the empty data before add new");
            }
        };

        setCheckAllRecord=function(record,rowIndex){
            allRecordVendors = App.grdBudgetPlanVersionVendor.store.data.items;
            var rowIdx=0;
            for (var rowKey in allRecordVendors) {
                if (allRecordVendors.hasOwnProperty(rowKey)) {
                    var row = allRecordVendors[rowKey];
                    if (rowIdx!= rowIndex) {
                        row.set("IsDefault", false);
                        row.commit();
                    }
                }
                rowIdx++;
            }
            record.set("IsDefault", true);
            record.commit();
        };

        deleteFinish = function (result) {
            debugger;
            var _result = JSON.parse(result.responseText).result;
            if (_result == "" || _result == undefined){
                App.grdBudgetPlanVersionVendor.getStore().remove(App.grdBudgetPlanVersionVendor.getSelectionModel().getSelection());
            }

        };


        deleteSuccess = function () {
            App.grdBudgetPlanVersionVendor.getStore().reload();
        };

        var editBudgetPlanVersionVendor = function (editor, e) {
            
            if(e.field == "StartDate"){
                App.grdBudgetPlanVersionVendor.getStore().sort({ property: 'StartDate', direction: 'ASC' });
            }
            if(e.field == "StartHours"){
                e.record.set("StartDateHours",Ext.Date.dateFormat(new Date(e.value), "H:i"));
                e.record.commit();
            }
            if(e.field == "EndHours"){
                e.record.set("EndDateHours",Ext.Date.dateFormat(new Date(e.value), "H:i"));
                e.record.commit();
            }
            if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
                e.record.commit();
            }
        };

        var beforeEditBudgetPlanVersionVendor = function (editor, e) {
            
            if("@isDisableButton" == "True")
                return false;
            App.grdBudgetPlanVersionVendor.getSelectionModel().select(e.record);

        };


        deleteRows = function()
        {
            App.grdBudgetPlanVersionVendor.getStore().remove(App.grdBudgetPlanVersionVendor.getSelectionModel().getSelection());
            App.grdBudgetPlanVersionVendor.getStore().reload();
        };

        var viewReady = function (grid, record) {
            var store = grid.store;

            store.clearFilter();

            store.filterBy(function(row, id){
                return row.get('BudgetPlanVersionPeriodID') === "";
            });
        };

        var renderStartTime = function(record){
            return record.data.StartDateHours;
        };

        var renderEndTime = function(record){
            return record.data.EndDateHours;
        };

    </script>


    var grdBudgetPlanVersionVendor = X.GridPanel()
    .ID("grdBudgetPlanVersionVendor")
    .Padding(iBodyPadding)
    .MinHeight(iGridMinHeight)
    .SelectionModel(
        X.RowSelectionModel()
        .Mode(SelectionMode.Multi)
        .AllowDeselect(true)
    )
    .Listeners(oListener =>
    {
        oListener.SelectionChange.Handler = isDisableButton ? "" : "selectionChange(selected.length)";
        oListener.ViewReady.Fn = "viewReady";
    })
    .Store(
            X.Store()
            .AutoLoad(true)
            .RemoteSort(false)
            .RemotePaging(true)
            .RemoteFilter(false)
            .PageSize(iPageSize)
            .DataSource(Model)
            .Model(
                X.Model()
                .Name("ModelBudgetPlanVersionVendor")
                .Fields(
                    X.ModelField().Name(Model, model => model.BudgetPlanVersionVendorID),
                    X.ModelField().Name(Model, model => model.BudgetPlanVersionPeriodID),
                    X.ModelField().Name(Model, model => model.VendorID),
                    X.ModelField().Name(Model, model => model.VendorDesc),
                    X.ModelField().Name(Model, model => model.StartDate).Type(ModelFieldType.Date),
                    X.ModelField().Name(Model, model => model.EndDate).Type(ModelFieldType.Date),
                    X.ModelField().Name(Model, model => model.StartDateHours),
                    X.ModelField().Name(Model, model => model.EndDateHours),
                    X.ModelField().Name(Model, model => model.AllowDelete),
                    X.ModelField().Name(Model, model => model.StatusID)
                )
            )
        )
        .ColumnModel(

                X.Column()
                .Text("")
                .Flex(3)
                .Columns(
                X.Column()
                .Text(BudgetPlanVersionVendorVM.Prop.VendorDesc.Desc)
                .DataIndex(Model, model => model.VendorDesc)
                .Sortable(false)
                .Flex(3)
                .Items(
                    X.Container()
                    .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                    .Layout(LayoutType.Fit)
                    .Items(
                        X.TextField()
                       .Flex(3)
                        .Listeners(oListener =>
                        {
                            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                        })

                    ))
                .Editor(
                    X.TextField()
                    .SubmitValue(true)
                    .HideTrigger(true)
                    .ID("ColVendor")
                    .AllowBlank(false)
                    .ReadOnly(true)
                    .RightButtonsShowMode(ButtonsShowMode.MouseOverOrFocus)
                    .RightButtons(
                        btnBrowseVendor.Disable(isDisableButton),
                        btnEraseVendor.Handler("eraseVendor(App.grdBudgetPlanVersionVendor.store.indexOf(App.grdBudgetPlanVersionVendor.getSelectionModel().getSelection()[0]));")
                    ).AllowBlank(false)
                )

                ),
                X.Column()
                .Text("")
                .DataIndex(Model, model => model.StatusID)
                .Hidden(true),

                X.Column()
                .Text(BudgetPlanVersionVendorVM.Prop.StartDate.Desc)
                .Flex(3)
                .Columns(
                    X.DateColumn()
                    .Text("Date")
                    .DataIndex(Model, model => model.StartDate)
                    .Format(global_asax.DefaultDateFormat)
                    .Items(
                        X.Container()
                        .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueDateRange", ParameterMode.Raw)))
                        .Layout(LayoutType.HBox)
                        .Items(
                            X.DateField()
                            .Flex(1)
                            .Format(global_asax.DefaultDateFormat)
                            .HideTrigger(true)
                            .Listeners(oListener =>
                            {
                                oListener.Blur.Handler = "this.triggerEl.hide();";
                                oListener.Focus.Handler = "this.triggerEl.show();";
                                oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                            }),
                            X.DateField()
                            .Flex(1)
                            .Format(global_asax.DefaultDateFormat)
                            .HideTrigger(true)
                            .Listeners(oListener =>
                            {
                                oListener.Blur.Handler = "this.triggerEl.hide();";
                                oListener.Focus.Handler = "this.triggerEl.show();";
                                oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                            })
                        ))
                    .Editor(
                        X.DateField()
                        .ReadOnly(isDisableButton)
                        .Format(global_asax.DefaultDateFormat)
                        .SubmitValue(true)
                        .AllowBlank(false)
                       .ID("ColStartDate")
                    ),
                     X.Column()
                    .Text("Time")
                    .DataIndex(Model, model => model.StartHours)
                    .Sortable(false)
                    .Editor(
                            X.TimeField()
                            .Format(global_asax.ShortTimeFormat)
                            .SubmitValue(true)
                            .ID("ColStartTime")
                    ).Items(
                        X.TimeField()
                        .Format(global_asax.ShortTimeFormat)
                        .HideTrigger(true)
                        .Listeners(oListener =>
                        {
                            oListener.Blur.Handler = "this.triggerEl.hide();";
                            oListener.Focus.Handler = "this.triggerEl.show();";
                            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                        })
                    ).Renderer("return renderStartTime(record);")

            ),
            X.Column()
            .Text(BudgetPlanVersionVendorVM.Prop.EndDate.Desc)
            .Flex(3)
            .Columns(
               X.DateColumn()
                    .Text("Date")
                    .DataIndex(Model, model => model.EndDate)
                    .Format(global_asax.DefaultDateFormat)
                    .Sortable(false)
                    .Items(
                        X.Container()
                        .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueDateRange", ParameterMode.Raw)))
                        .Layout(LayoutType.HBox)
                        .Items(
                            X.DateField()
                            .Flex(1)
                            .Format(global_asax.DefaultDateFormat)
                            .HideTrigger(true)
                            .Listeners(oListener =>
                            {
                                oListener.Blur.Handler = "this.triggerEl.hide();";
                                oListener.Focus.Handler = "this.triggerEl.show();";
                                oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                            }),
                            X.DateField()
                            .Flex(1)
                            .Format(global_asax.DefaultDateFormat)
                            .HideTrigger(true)
                            .Listeners(oListener =>
                            {
                                oListener.Blur.Handler = "this.triggerEl.hide();";
                                oListener.Focus.Handler = "this.triggerEl.show();";
                                oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                            })
                        ))
                    .Editor(
                        X.DateField()
                        .ReadOnly(isDisableButton)
                        .Format(global_asax.DefaultDateFormat)
                        .SubmitValue(true)
                        .AllowBlank(false)
                        .ID("ColEndDate")
                   ),
                X.Column()
                    .Text("Time")
                    .DataIndex(Model, model => model.EndHours)
                    .Sortable(false)
                    .Editor(
                            X.TimeField()
                            .Format(global_asax.ShortTimeFormat)
                            .SubmitValue(true)
                            .ID("ColEndTime")
                    ).Items(
                        X.TimeField()
                        .Format(global_asax.ShortTimeFormat)
                        .HideTrigger(true)
                        .Listeners(oListener =>
                        {
                            oListener.Blur.Handler = "this.triggerEl.hide();";
                            oListener.Focus.Handler = "this.triggerEl.show();";
                            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                        })
                    ).Renderer("return renderEndTime(record);")

            )

    )
   .Plugins(
                X.FilterHeader()
                .Remote(false),
                 X.CellEditing()
                     .ClicksToEdit(1)
                        .Listeners(ls => ls.Edit.Fn = "editBudgetPlanVersionVendor")
                        .Listeners(ls => ls.BeforeEdit.Fn = "beforeEditBudgetPlanVersionVendor")
                        .ID("rowEditorBudgetPlanVersionVendor")
            )
    .TopBar(
        X.Toolbar()
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
            btnAdd.Handler("addBudgetPlanVendorVersion()").Disabled(true),
            btnDelete.Disabled(true)


        )
    )
    .BottomBar(
        X.PagingToolbar()
        .DisplayInfo(true)
        .BaseCls("paging")
        .DisplayMsg("Displaying {0} - {1} of {2}")
        .EmptyMsg("No records to display")
    );
}
@(
    X.Panel()
    .ID("pnlGridBudgetPlanVersionVendor")
    .Items(
        hdnTextFieldVendorID.Listeners(ls => ls.Change.Handler = "setVendorID(App.grdBudgetPlanVersionVendor.store.indexOf(App.grdBudgetPlanVersionVendor.getSelectionModel().getSelection()[0]))"),
        hdnTextFieldVendorDesc.Listeners(ls => ls.Change.Handler = "setVendorDesc(App.grdBudgetPlanVersionVendor.store.indexOf(App.grdBudgetPlanVersionVendor.getSelectionModel().getSelection()[0]))"),
        grdBudgetPlanVersionVendor
    )
)