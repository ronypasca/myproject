@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.Controllers
@using com.SML.BIGTRONS.ViewModels
@model List<CartItemVM>
@{
    ViewBag.Title = "Cart";
    var X = Html.X();
    string sPageName = "HomeCartItem";
    string sToolbarPaddingSpec = "10 10 10 0";
    int iTreeMinHeight = 200;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    int iPageSize = 30;
    bool isDisableButton = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);
    string gridClass = "printSection";
    string topBarClass = "topbar";
    List<Parameter> oParamList;
    Parameter oParam;

    oParamList = new List<Parameter>();
    oParam = new Parameter(ItemVersionChildVM.Prop.ChildItemTypeID.Name, "getChildItemTypeId()", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdPnlCatalogCartItem.getSelectedNodes()[0].attributes", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, sPageName, null, General.EnumDesc(Buttons.ButtonAdd) + "BudgetPlanVersionStructure", true, false, false, null, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdPnlCatalogCartItem.getSelectedNodes()[0].attributes", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    oParam = new Parameter(ItemPriceVM.Prop.RegionID.Name, "App.RegionID.getValue()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter(ItemPriceVM.Prop.ProjectID.Name, "App.ProjectID.getValue()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter(ItemPriceVM.Prop.ClusterID.Name, "App.ClusterID.getValue()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter(ItemPriceVM.Prop.UnitTypeID.Name, "App.UnitTypeID.getValue()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    Button.Builder btnUpdate = global_asax.Button(Buttons.ButtonUpdate, sPageName, null, General.EnumDesc(Buttons.ButtonUpdate) + "BudgetPlanVersionStructure", true, false, false, null, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter("Value" + ItemPriceVM.Prop.ItemID.Name, "App.grdPnlCatalogCartItem.getSelectedNodes()[0].attributes.itemid", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter(ItemPriceVM.Prop.RegionID.Name, "App.RegionID.getValue()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter(ItemPriceVM.Prop.ProjectID.Name, "App.ProjectID.getValue()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter(ItemPriceVM.Prop.ClusterID.Name, "App.ClusterID.getValue()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter(ItemPriceVM.Prop.UnitTypeID.Name, "App.UnitTypeID.getValue()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    Button.Builder btnChangeSupplier = global_asax.Button(Buttons.ButtonUpdate, "ItemPriceVendor", "Change Supplier", "../Item/" + General.EnumDesc(Buttons.ButtonBrowse) + "ItemPriceVendorPeriod", true, false, false, null, oParamList);

    Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, string.Empty, true);

    Button.Builder btnRefreshPrice = global_asax.Button(Buttons.ButtonReverse, sPageName, "Refresh Price", string.Empty, true);

    Button.Builder btnCollapse = global_asax.Button(Buttons.ButtonCollapse, sPageName, null, string.Empty, true).EnableToggle(true).ToggleHandler("toggleButtonHandler");
    Button.Builder btnExpand = global_asax.Button(Buttons.ButtonExpand, sPageName, null, string.Empty, true);
    Button.Builder btnPrint = global_asax.Button(Buttons.ButtonPrint, sPageName, null, string.Empty, true);

    oParamList = new List<Parameter>();
    oParam = new Parameter("GridStructure", "GetStructure()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter("Selected", "App.grdBudgetPlan.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    Button.Builder btnExport = global_asax.Button(Buttons.ButtonExport, "btnExp", "Export", "../BudgetPlan/ExportExcelReturnDirect", true, false, false, null, oParamList, null, "SuccessExport");


    oParamList = new List<Parameter>();
    oParam = new Parameter("GridStructure", "GetStructure()", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter("Selected", "App.grdBudgetPlan.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, false);
    oParamList.Add(oParam);
    oParam = new Parameter(BudgetPlanVersionStructureVM.Prop.ItemTypeID.Name, "BOI", ParameterMode.Value, false);
    oParamList.Add(oParam);
    Button.Builder btnExportBOI = global_asax.Button(Buttons.ButtonExport, "btnExpBOI", "Export (Only BOI Level)", "../BudgetPlan/ExportExcelReturnDirect", true, false, false, null, oParamList, null, "SuccessExport");


    <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        var iTreeInitHeight = -1;
        var sequence=0;

        $(window).resize(function () {
            resizeTreeBudgetPlanVersionStructure();
            resizeContainer();
        });

        var doPrint = function () {
            App.grdPnlCatalogCartItem.setHeight("100%");
            document.body.scrollTop = document.documentElement.scrollTop = 0;
            window.print();
        };

        var afterFirstLoadTree = function () {
            if (iTreeInitHeight = -1)
                iTreeInitHeight = App.grdPnlCatalogCartItem.getHeight();
            resizeTreeBudgetPlanVersionStructure();
            resizeContainer();
        };

        var resizeTreeBudgetPlanVersionStructure = function () {
            if (App.grdPnlCatalogCartItem != null) {
                var iHeight = $(window).height() - (App.grdPnlCatalogCartItem.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height();
                if (iHeight > iTreeInitHeight)
                    iHeight = iTreeInitHeight;
                App.grdPnlCatalogCartItem.setHeight(iHeight);
                if (iTreeInitHeight > iHeight)
                    App.grdPnlCatalogCartItem.setHeight(iHeight);

                App.grdPnlCatalogCartItem.updateLayout();
            }
        };

        var selectionChangeCartItem = function (length) {
            App.ButtonDeleteHomeCartItem.setDisabled(length<1);
        };

        var editCartItem = function (editor, e) {

            var qty = ((e.record.get == "undefined" || e.record.get("Qty") == null) ? 0 : e.record.get("Qty"));
            var amount = ((e.record.get == "undefined" || e.record.get("Amount") == null) ? 0 : e.record.get("Amount"));
            var total = parseFloat(qty) * parseFloat(amount);


            e.record.set("Total", total);
            e.record.commit();


            if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
                e.record.commit();
            }
            if(parseFloat(total)==0)
            {

                e.row.bgColor="#e17878";
                /*e.cell.style.backgroundColor = "#e17878";*/
            }
            else{
                e.row.bgColor="";
            }
        };

        var beforeEditCartItem = function (editor, e) {
           
            if("@isDisableButton" == "True")
                return false;

        };

        var setrowbgclass = function(node, rowIndex, rowParams, store) {
            var _isboi = node.data.isboi;
            var _isahs = node.data.isahs;
            var _volume = (node.data.volume == null) ? 0 : node.data.volume;
            var _materialamount = (node.data.materialamount == null) ? 0 : node.data.materialamount;
            var _wageamount = (node.data.wageamount == null) ? 0 : node.data.wageamount;
            var _miscamount = (node.data.miscamount == null) ? 0 : node.data.miscamount;
            var _expandable = node.data.expandable;
            var _totprice = _materialamount + _wageamount + _miscamount;
            var _leaf = node.data.leaf;
            var _hasChild = node.data.haschild;
            var trueChild= true;
            var isGrandTotal = node.data.isGrandTotal;
            if(isGrandTotal== undefined)
                isGrandTotal=false;
            
            if(!node.data.hasOwnProperty('isgrandtotal'))
                if (_isboi)
                {

                    if (node.childNodes.length==0){
                        if(_volume <= 0 || _totprice <= 0){
                            return "x-grid-item-danger ";
                        }
                    }
                    else{

                        if(_volume <= 0 && node.childNodes[0].data.isahs){
                            return "x-grid-item-danger ";
                        }
                    }

                }else if(_isahs){
                    if(_totprice <= 0){
                        return "x-grid-item-danger ";
                    }
                }else if(!_isahs && !_isboi && !isGrandTotal)
                    {
                        if(_totprice <= 0){
                            return "x-grid-item-danger ";
                        }
                    }

        };


        var viewReady = function (grid, eOpts) {

            loadTreePanel(false);
        };

        var getListBudgetPlanVersionStructure = function (nodeTree) {
            var data =new Array();

            var nodes = getDeepAllChildNodes(nodeTree);
            for (var i = 0; i < nodes.length; i++) {
                /*if(!nodes[i].data.root)*/
                if(!nodes[i].data.hasOwnProperty('isGrandTotal'))
                    data.push(nodes[i].data);
            }

            return data;
        };

        var SuccessExport = function (filename) {

            window.location = "Content/"+JSON.parse(filename.responseText).result;
            Ext.Ajax.request({
                url: '../BudgetPlan/ClearExcelFile',
                method: 'POST',
                params:{
                    filename: JSON.parse(filename.responseText).result
            },
                /*success: function (response) {
                var jsonData = Ext.util.JSON.decode(response.responseText);
                vendorList = jsonData.data;
                if(vendorList.length > 0){
                    var dataStore = store.store.root.data;
                    combineVendortoTemplate(dataStore, vendorList, store.store);
                }
                else{

                }
            },*/
            failure: function (response) {
                Ext.Msg.alert("Error Delete from Server", response);
            }
        });
        };

        var getDeepAllChildNodes = function(node){
            var allNodes = new Array();
            if(node==null || node==undefined){
                return [];
            }

            if(!node.hasChildNodes()){
                return node;
            }else{
                allNodes.push(node);
                node.eachChild(function(Mynode){allNodes = allNodes.concat(getDeepAllChildNodes(Mynode));});
            }
            return allNodes;
        };


        var reSequence = function (NodeTree) {
            if(NodeTree.childNodes.length==0){
                var oldSequenceDesc = String(NodeTree.data.sequencedesc);
                NodeTree.data.sequencedesc = NodeTree.data.sequencedesc + '.' + (i + 1).toString();
                NodeTree.data.sequencedesc = NodeTree.data.sequencedesc.replace('.NaN', '');

                NodeTree.commit();
            }else

                for (var i = 0; i < NodeTree.childNodes.length; i++) {
                    if(!NodeTree.childNodes[i].data.hasOwnProperty('isGrandTotal')){
                        var oldSequenceDesc = String(NodeTree.childNodes[i].data.sequencedesc);
                        NodeTree.childNodes[i].data.parentsequence =  (NodeTree.data.sequence == 'NaN' || NodeTree.data.sequence == undefined) ? 0 : NodeTree.data.sequence;
                        NodeTree.childNodes[i].data.sequencedesc = NodeTree.data.sequencedesc + '.' + (i + 1).toString();
                        NodeTree.childNodes[i].data.sequencedesc = NodeTree.childNodes[i].data.sequencedesc.replace('undefined.', '');

                        sequence = (sequence==undefined?0:sequence) + 1;
                        NodeTree.childNodes[i].data.sequence = sequence;

                        reSequence(NodeTree.childNodes[i]);
                        NodeTree.commit();
                    }
                }


        };


        var deleteConfirm = function () {
            Ext.Msg.confirm("Confirmation", "Are you sure want to delete selected record?", "deleteRows");
        };

        var deleteRows = function (title, message, fn, scope) {

            if (title == "yes") {
                App.grdPanelCatalogCart.getStore().remove(App.grdPanelCatalogCart.getSelectionModel().getSelection());
                App.grdPanelCatalogCart.getView().refresh(false);
            }

        };

        var getChildItemTypeId =function(){
            if(App.grdPnlCatalogCartItem.getSelection()[0].data.children!=null)
                return App.grdPnlCatalogCartItem.getSelection()[0].data.children[0].itemtypeid;
            else return "";
        };


        var recalculatePrice= function(_node){
            while (_node!=null) {
                var _total=0;
                var _volume=0;
                var _material=0;
                var _wage =0;
                var _misc =0;

                for (var i = 0; i < _node.childNodes.length; i++) {
                    var total = ((_node.childNodes[i].data.total =="" ||_node.childNodes[i].data.total ==null || isNaN(_node.childNodes[i].data.total) || _node.childNodes[i].data.total == undefined )  ? 0: _node.childNodes[i].data.total);
                    _total+=total;

                    var material = ((_node.childNodes[i].data.materialamount =="" || _node.childNodes[i].data.materialamount ==null || isNaN(_node.childNodes[i].data.materialamount) || _node.childNodes[i].data.materialamount == undefined )  ? 0: _node.childNodes[i].data.materialamount);
                    _material+=material;

                    var wage = ((_node.childNodes[i].data.wageamount =="" ||_node.childNodes[i].data.wageamount ==null || isNaN(_node.childNodes[i].data.wageamount) || _node.childNodes[i].data.wageamount == undefined )  ? 0: _node.childNodes[i].data.wageamount);
                    _wage+=wage;

                    var misc = ((_node.childNodes[i].data.miscamount =="" || _node.childNodes[i].data.miscamount ==null || isNaN(_node.childNodes[i].data.miscamount) || _node.childNodes[i].data.miscamount == undefined )  ? 0: _node.childNodes[i].data.miscamount);
                    _misc+=misc;


                }
                if (_total==0) {
                    _node.set("@BudgetPlanVersionStructureVM.Prop.Total.Name.ToLower()","");
                }else
                    _node.set("@BudgetPlanVersionStructureVM.Prop.Total.Name.ToLower()",_total);

                if((_node.data.isboi && !_node.childNodes[0].data.isboi && _node.parentNode.data.isboi && _node.parentNode.id !="0")||
                    (_node.data.isahs)){
                    if (_material==0) {
                        _node.set("@BudgetPlanVersionStructureVM.Prop.MaterialAmount.Name.ToLower()","");
                    }else
                        _node.set("@BudgetPlanVersionStructureVM.Prop.MaterialAmount.Name.ToLower()",_material);

                    if (_wage==0) {
                        _node.set("@BudgetPlanVersionStructureVM.Prop.WageAmount.Name.ToLower()","");
                    }else
                        _node.set("@BudgetPlanVersionStructureVM.Prop.WageAmount.Name.ToLower()",_wage);

                    if (_misc==0) {
                        _node.set("@BudgetPlanVersionStructureVM.Prop.MiscAmount.Name.ToLower()","");
                    }else
                        _node.set("@BudgetPlanVersionStructureVM.Prop.MiscAmount.Name.ToLower()",_misc);

                    _volume = ((_node.data.volume ==null || isNaN(_node.data.volume) || _node.data.volume == undefined )  ? 0: _node.data.volume);

                    if(_volume>0){
                        var row_totalunitprice = (parseFloat(_material==null?0:_material)+parseFloat(_wage==null?0:_wage)+parseFloat(_misc==null?0:_misc));
                        var row_total =(parseFloat(_volume==null?0:_volume) * row_totalunitprice);

                        if (row_total==0) {
                            _node.set("@BudgetPlanVersionStructureVM.Prop.TotalUnitPrice.Name.ToLower()","");
                            _node.set("@BudgetPlanVersionStructureVM.Prop.Total.Name.ToLower()","");
                        }else{
                            _node.set("@BudgetPlanVersionStructureVM.Prop.TotalUnitPrice.Name.ToLower()",row_totalunitprice);
                            _node.set("@BudgetPlanVersionStructureVM.Prop.Total.Name.ToLower()",row_total);
                        }
                    }


                }
                App.grdPnlCatalogCartItem.store.getNodeById(_node.id).commit();
                _node=_node.parentNode;

            }
        };

        var afterRenderTree =function() {

            /*nodes = App.grdPnlCatalogCartItem.store.getAllRange();
            rowIndex=0;
            for (var rowKey in nodes) {
                if (nodes.hasOwnProperty(rowKey)) {
                    var row = nodes[rowKey];
                    App.grdPnlCatalogCartItem.editingPlugin.startEditByPosition({ row: rowIndex, column: 3 });
                }
            }*/
        };


       

        updateTreeView = function(tree, fn) {
            var view = tree.getView();
            view.getStore().loadRecords(fn(tree.getRootNode()));
            view.refresh();
            Ext.getBody().unmask();
        };

        collapseAll = function(tree) {
            this.updateTreeView(tree, function(root) {
                root.cascadeBy(function(node) {
                    if (!node.isRoot() || tree.rootVisible) {
                        node.data.expanded = false;
                    }
                });
                return tree.rootVisible ? [root] : root.childNodes;
            });
        };

        expandAll = function(tree) {
            this.updateTreeView(tree, function(root) {
                var nodes = [];
                root.cascadeBy(function(node) {
                    if (!node.isRoot() || tree.rootVisible) {
                        node.data.expanded = true;
                        nodes.push(node);
                    }
                });
                return nodes;
            });
        };

        var handleCollapseExpandAll = function(btn){
            btn.setHidden(true);
            sequence=0;

            if(btn.id=='@General.EnumName(Buttons.ButtonCollapse)@sPageName'){
                /*App.grdPnlCatalogCartItem.collapseAll();*/
                collapseAll(App.grdPnlCatalogCartItem);
                reSequence(App.grdPnlCatalogCartItem.getRootNode());
            }else{
                /*App.grdPnlCatalogCartItem.expandAll();*/
                expandAll(App.grdPnlCatalogCartItem);
                reSequence(App.grdPnlCatalogCartItem.getRootNode());

            }

        };

        toggleButtonHandler = function(btn, pressed,e){
            try {


            sequence=0;
            if(btn.text=='Collapse'){
                btn.setText('Expand');
                /*App.grdPnlCatalogCartItem.collapseAll();*/
                collapseAll(App.grdPnlCatalogCartItem);
                reSequence(App.grdPnlCatalogCartItem.getRootNode());
            }else{
                btn.setText('Collapse');
                /*App.grdPnlCatalogCartItem.expandAll();*/
                expandAll(App.grdPnlCatalogCartItem);
                reSequence(App.grdPnlCatalogCartItem.getRootNode());
            }
            }catch (e) {

            }
        };


        @*/*
        var refreshTree = function (tree) {
            Ext.getBody().mask('Loading');
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("RefreshPriceBudgetPlanVersionStructure", "BudgetPlan"))',
                params: {
                    BudgetPlanID: App.BudgetPlanID.getValue(),
                    BudgetPlanVersion: App.BudgetPlanVersion.getValue(),
                    BudgetPlanTemplateID: App.BudgetPlanTemplateID.getValue(),
                    ProjectID: App.ProjectID.getValue(),
                    ClusterID: App.ClusterID.getValue(),
                    UnitTypeID: App.UnitTypeID.getValue(),
                    RegionID:App.RegionID.getValue(),
                    IsLoadTemplate: App.IsLoadTemplate.getValue(),
                    FeeContractor: App.FeePercentage.getValue(),
                    Area : App.Area.getValue()
                }
                ,
                success : function (node) {
                    reSequence(App.grdPnlCatalogCartItem.getRootNode());
                    Ext.getBody().unmask();
                    App.grdPnlCatalogCartItem.getRootNode().expand(true);
                    setTimeout("afterFirstLoadTree()", 1);


                }
            }
            );
        };*@

        var renderTotalUnitPrice = function(record){
            var row=record.data;
            var material =parseFloat(Ext.isEmpty(row.materialamount)?0:row.materialamount);
            var wage = parseFloat(Ext.isEmpty(row.wageamount)?0:row.wageamount);
            var misc = parseFloat(Ext.isEmpty(row.miscamount)?0:row.miscamount);
            var decTotalUnitPrice =parseFloat((material==null?0:material)+(wage==null?0:wage)+(misc==null?0:misc));

            if(record.get("displayprice") && ( record.get("isahs") || record.get("isboi")))
                return decTotalUnitPrice==0?null:(Ext.util.Format.number(decTotalUnitPrice, integerNumberFormat));
            else
                return "";
        };

        var renderTotal = function(record){
            var decTotal=0;
            var qty = record.get("Qty");
            var amount = record.get("Amount");
            decTotal = Ext.util.Format.number(qty*amount, defaultNumberFormat);
                

            return (decTotal==0?null:decTotal.replace(/\.?0+$/, ''));
        };
        
        var summaryTotal = function(){
            total=0;
            Ext.Array.each(App.grdPanelCatalogCart.getRowsValues(), function(record) {
                total += (record.Qty*record.Amount);
            });
            return Ext.util.Format.number(total, defaultNumberFormat).replace(/\.?0+$/, '');
        };

        var renderMaterialAmount = function(record){
            var valMaterial =   Ext.util.Format.number(record.get("materialamount"),integerNumberFormat);
            return record.get("displayprice") ?  (valMaterial==0?"":valMaterial) : "" ;
        };

        var renderWageAmount = function(record){
            var valWage =   Ext.util.Format.number(record.get("wageamount"),integerNumberFormat);
            return record.get("displayprice") ? (valWage==0?"":valWage)  : "" ;
        };

        var renderMiscAmount = function(record){
            var valMisc =   Ext.util.Format.number(record.get("miscamount"),integerNumberFormat);
            return record.get("displayprice") ? (valMisc==0?"":valMisc) : "" ;
        };

        var renderTreeColumn = function(a,b){

            var recorddata = b.record.data;
            var isboi = recorddata.isboi;
            var isahs = recorddata.isahs;
            var datawageamount = recorddata.wageamount;
            var datamaterialamount = recorddata.materialamount;
            var datamiscamount = recorddata.miscamount;
            var datatotal =  datawageamount + datamaterialamount + datamiscamount;


            if(!recorddata.hasOwnProperty('isGrandTotal')){
                if(!isboi && !isahs){
                    if(datatotal == 0){
                        b.style = "color:red;";
                    }
                }
            }

            return a;
        };

        var recalculateSubTotalNodes = function(){
            var areaSize = App.Area.value == 0 ? 1 :App.Area.value;
            var Rootnode = App.grdPnlCatalogCartItem.store.getRootNode();
            var valueGrandTotal=0;
            for (var i = 0; i < Rootnode.childNodes.length - 2; i++) {
                valueGrandTotal=valueGrandTotal+Rootnode.childNodes[i].data.total;
            }


            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.Subtotal.Name').set("total",valueGrandTotal);
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.ContractorFee.Name').set("total",valueGrandTotal*App.FeePercentage.getValue()/100);
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.Total.Name').set("total",valueGrandTotal*App.FeePercentage.value/100+valueGrandTotal);
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.Rounding.Name').set("total",Math.floor((valueGrandTotal*App.FeePercentage.value/100+valueGrandTotal)/1000)*1000);
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.Tax.Name').set("total",Math.floor((valueGrandTotal*App.FeePercentage.value/100+valueGrandTotal)/1000)*100);
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.GrandTotalIncPPN.Name').set("total",(Math.floor((valueGrandTotal*App.FeePercentage.value/100+valueGrandTotal)/1000)*100)+(Math.floor((valueGrandTotal*App.FeePercentage.value/100+valueGrandTotal)/1000)*1000));
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.AreaSize.Name').set("total",parseFloat(App.Area.value));
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.BasicPriceI.Name').set("total",valueGrandTotal/parseFloat(areaSize));
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.BasicPriceII.Name').set("total",(Math.floor((valueGrandTotal*App.FeePercentage.value/100+valueGrandTotal)/1000)*1000)/parseFloat(areaSize));
            App.grdPnlCatalogCartItem.store.getNodeById('@BudgetPlanVM.Prop.BasicPriceIII.Name').set("total",((Math.floor((valueGrandTotal*App.FeePercentage.value/100+valueGrandTotal)/1000)*100)+(Math.floor((valueGrandTotal*App.FeePercentage.value/100+valueGrandTotal)/1000)*1000))/parseFloat(areaSize));

        };



        Ext.define('ModelBudgetPlan', {
            extend: 'Ext.data.Model',
            fields: [
                {name: '@BudgetPlanVersionStructureVM.Prop.SequenceDesc.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.ItemDesc.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.Specification.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.UoMID.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.Volume.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.MaterialAmount.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.WageAmount.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.MiscAmount.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.TotalUnitPrice.Name.ToLower()'},
                {name: '@BudgetPlanVersionStructureVM.Prop.Total.Name.ToLower()'}
            ]
        });

        var createGridToExports = function (grid) {

            var dataToExports = getListBudgetPlanVersionStructure(grid.getRootNode());
            dataToExports[0] = {
                '@BudgetPlanVersionStructureVM.Prop.SequenceDesc.Name.ToLower()': 'No',
                '@BudgetPlanVersionStructureVM.Prop.ItemDesc.Name.ToLower()' : '@BudgetPlanVersionStructureVM.Prop.ItemDesc.Desc' ,
                '@BudgetPlanVersionStructureVM.Prop.Specification.Name.ToLower()': '@BudgetPlanVersionStructureVM.Prop.Specification.Desc' ,
                '@BudgetPlanVersionStructureVM.Prop.UoMID.Name.ToLower()' : '@BudgetPlanVersionStructureVM.Prop.UoMID.Desc' ,
                '@BudgetPlanVersionStructureVM.Prop.Volume.Name.ToLower()' :'@BudgetPlanVersionStructureVM.Prop.Volume.Desc',
                '@BudgetPlanVersionStructureVM.Prop.MaterialAmount.Name.ToLower()':'@BudgetPlanVersionStructureVM.Prop.MaterialAmount.Desc' ,
                '@BudgetPlanVersionStructureVM.Prop.WageAmount.Name.ToLower()':'@BudgetPlanVersionStructureVM.Prop.WageAmount.Desc' ,
                '@BudgetPlanVersionStructureVM.Prop.MiscAmount.Name.ToLower()':'@BudgetPlanVersionStructureVM.Prop.MiscAmount.Desc' ,
                '@BudgetPlanVersionStructureVM.Prop.TotalUnitPrice.Name.ToLower()':'@BudgetPlanVersionStructureVM.Prop.TotalUnitPrice.Desc' ,
                '@BudgetPlanVersionStructureVM.Prop.Total.Name.ToLower()':'@BudgetPlanVersionStructureVM.Prop.Total.Desc'
                };

            var exportStore= Ext.create('Ext.data.Store', {
                storeId: 'exportStore',
                data: dataToExports,
                model: 'ModelBudgetPlan'
            });

            Ext.create('Ext.grid.Panel', {
                id: 'gridToExport',
                store: exportStore,
                columns:
                    [
                    { text: 'No',  dataIndex: '@BudgetPlanVersionStructureVM.Prop.SequenceDesc.Name.ToLower()', type: 'string' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.ItemDesc.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.ItemDesc.Name.ToLower()' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.Specification.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.Specification.Name.ToLower()' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.UoMID.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.UoMID.Name.ToLower()' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.Volume.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.Volume.Name.ToLower()' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.MaterialAmount.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.MaterialAmount.Name.ToLower()' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.WageAmount.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.WageAmount.Name.ToLower()' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.MiscAmount.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.MiscAmount.Name.ToLower()' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.TotalUnitPrice.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.TotalUnitPrice.Name.ToLower()' },
                    { text: '@BudgetPlanVersionStructureVM.Prop.Total.Desc', dataIndex: '@BudgetPlanVersionStructureVM.Prop.Total.Name.ToLower()' }
                    ]
            });
        };

        var exportFromTreePanelToGrid = function (grid) {
            createGridToExports(grid);
            exportGrid(App.gridToExport, false, true, 'BudgetPlan', 'xls', 'budgetplan');
            App.gridToExport.destroy();
            App.exportStore.destroy();
        };
        /*saving here*/
        GetStructure = function(){
            var childata = App.grdPnlCatalogCartItem.getRootNode().childNodes;
            var dataLength = childata.length;
            var data = [];
            var x;
            for(x in childata)
            {
                data.push(childata[x].data);
                var node_ = childata[x];
                var setpushA_ = false;
                if(node_.data.haschild){
                    setpushA_ = true;}
                if(node_.childNodes.length > 0){
                    data = loopStruct(node_,data,setpushA_);
                };
            }
            return data;
        };
        var loopStruct = function(node, data,setpush){

            if(setpush){
                var setpush_ = false;
                var c;
                for(c in node.childNodes)
                {
                    data.push(node.childNodes[c].data);
                    var node_ = node.childNodes[c];
                    if(node_.data.haschild){setpush_ = true;}
                    if(node_.childNodes.length > 0){
                        data = loopStruct(node_,data,setpush_);
                    }
                }
            }
            return data;
        };


        function renderTip(val, meta, rec, rowIndex, colIndex, store) {
            meta.tdAttr = 'data-qtip="' + val.replace("'","").replace("\""," inches") + '"';
            return val;
        };

    </script>
}
@(
        X.GridPanel()
            .ID("grdPanelCatalogCart")

            .SelectionModel(
                X.RowSelectionModel()
                .Mode(SelectionMode.Single)
                .AllowDeselect(true)
            )
            .RowLines(true)
            .ColumnLines(true)
            .SortableColumns(false)
            .AutoScroll(true)
            .MinHeight(iGridMinHeight)
            .Padding(iBodyPadding)
            //.Cls(gridClass)
            .Store(
            X.Store()
                .AutoLoad(true)
                .RemoteSort(false)
                .RemotePaging(true)
                .RemoteFilter(false)
                .PageSize(iPageSize)
                .DataSource(Model)
                .Model(
                    X.Model()
                    .Name("ModelCartItem")
                    .Fields(
                        X.ModelField().Name(Model, model => model.CatalogCartID),
                        X.ModelField().Name(Model, model => model.CatalogCartID),
                        X.ModelField().Name(Model, model => model.ItemDesc),
                        X.ModelField().Name(Model, model => model.ItemID),
                        X.ModelField().Name(Model, model => model.ItemPriceID),
                        X.ModelField().Name(Model, model => model.ItemTypeID),
                        X.ModelField().Name(Model, model => model.UoMID),
                        X.ModelField().Name(Model, model => model.UoMDesc),
                        X.ModelField().Name(Model, model => model.Qty),
                        X.ModelField().Name(Model, model => model.VendorID),
                        X.ModelField().Name(Model, model => model.ValidFrom),
                        X.ModelField().Name(Model, model => model.VendorDesc),
                        X.ModelField().Name(Model, model => model.Amount),
                        X.ModelField().Name(Model, model => model.Total)
                    )
                )


        )

        .ColumnModel(
             X.RowNumbererColumn()
             .Width(50)
            .Text("No"),
            X.Column()
            .Text(CartItemVM.Prop.ItemDesc.Desc)
            .Flex(4)
            //.Renderer("renderTreeColumn")
            .DataIndex(Model, model => model.ItemDesc)
            .SummaryRenderer(new Renderer { Fn = " function(){return '<b>Totals:</b>';}" })
            //.Renderer("renderTip")
            ,
             X.Column()
            .Text(CartItemVM.Prop.UoMDesc.Desc)
            .DataIndex(Model, model => model.UoMID)
            .Flex(1),
             X.Column()
            .Text(CartItemVM.Prop.VendorDesc.Desc)
            .DataIndex(Model, model => model.VendorDesc)
            .Flex(1),
            X.Column()
            .Text(CartItemVM.Prop.UoMDesc.Desc)
             .DataIndex(Model, model => model.UoMDesc)
            .Flex(1).Hidden(true),
             X.Column()
            .Text(CartItemVM.Prop.ItemID.Desc)
            .DataIndex(Model, model => model.ItemID)
            .Flex(1).Hidden(true),
            X.NumberColumn()
            .Text(CartItemVM.Prop.Qty.Desc)
           .DataIndex(Model, model => model.Qty)
            .Format(global_asax.DefaultNumberFormat)
            .Align(ColumnAlign.End)
            .Editor(
                     X.NumberField()
                         .ID("ColQty")
                         .SubmitValue(true)
                         .HideTrigger(true)
                         .EnforceMaxLength(true)
                         .MinValue(0)
                         .MaxLength(16)
                         .DecimalPrecision(4)
                         .SpinDownEnabled(false)
                         .SpinUpEnabled(false)
            )
            .Flex(1)
            ,
            X.NumberColumn()
                .Text(CartItemVM.Prop.Amount.Desc)
                .DataIndex(Model, model => model.Amount)
                .Format(global_asax.IntegerNumberFormat)
                .Align(ColumnAlign.End)
            ,
            X.NumberColumn()
                .Text(CartItemVM.Prop.Total.Desc)
                .DataIndex(Model, model => model.Total)
                //.Format(global_asax.IntegerNumberFormat)
                .Align(ColumnAlign.End)
                .Flex(2)
                .SummaryType(SummaryType.Sum)
                .SummaryRenderer(new Renderer { Fn= "summaryTotal" } )
                .Renderer("return renderTotal(record);")


    )
    //.ItemsFromPartial("../Shared/_PrintWindow")
     .Listeners(listener =>
     {
         //listener.AfterRender.Fn = "afterRenderTree";
         //listener.BeforeLoad.Handler = "loadTreePanel()";
         //listener.ViewReady.Fn = "viewReady";
         //listener.AfterItemExpand.Fn = "afterItemExpand";
         listener.SelectionChange.Handler = (!isDisableButton ? "selectionChangeCartItem(selected.length)" : "");
         //listener.AfterItemCollapse.Fn = "afterItemCollapse";

     })
    .Plugins(
         //X.FilterHeader(),
         //.Remote(true),
         X.CellEditing()
             .ClicksToEdit(1)
                .Listeners(ls => ls.Edit.Fn = "editCartItem")
                .Listeners(ls => ls.BeforeEdit.Fn = "beforeEditCartItem")
                .ID("rowEditor")

    )
    .Features(X.Summary())
    //.View(Html.X().TreeView().GetRowClass(function => function.Fn = "userGridRowClass"))
    //.ViewConfig(Html.X().GridView().LoadMask(false).GetRowClass(function => function.Fn = "setrowbgclass"))
    .TopBar(
        X.Toolbar()
        .Cls(topBarClass)
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
            //btnAdd.Disabled(true),
            //btnUpdate.Disabled(true),
            //btnChangeSupplier.Disabled(true),
            btnDelete.Disabled(true).Handler("deleteConfirm")//,
                                                             //btnRefreshPrice.Icon(Icon.ArrowRefresh).Disabled(isDisableButton).Handler("loadTreePanel(true);"),
                                                             //btnCollapse,//,.Handler("handleCollapseExpandAll"),
                                                             //btnExpand,//.Handler("handleCollapseExpandAll").Hidden(true),
                                                             //btnExport,
                                                             //btnExportBOI
                                                             //btnExport.Handler("exportFromTreePanelToGrid(App.grdPnlCatalogCartItem)")
                                                             //btnPrint.Handler("doPrint();")
        )
    ).BottomBar(
        X.StatusBar().AutoClear(1500)
        )

)