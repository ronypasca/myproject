@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model VendorVM
@{

    var X = Html.X();
    string sPageName = "Vendor";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    string sHandler = "selectVendorBrowse('" + ViewData["Control" + VendorVM.Prop.VendorID.Name]
        + "', '" + ViewData["Control" + VendorVM.Prop.VendorDesc.Name]
        + "', App.grdVendorBrowse.getRowsValues({selectedOnly:true})[0]['" + VendorVM.Prop.VendorID.Name + "']"
        + ", App.grdVendorBrowse.getRowsValues({selectedOnly:true})[0]['" + VendorVM.Prop.VendorDesc.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, null, true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdVendorBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdVendorBrowse();
        });

        resizeGrdVendorBrowse = function () {
            if (App.grdVendorBrowse != null)
                App.grdVendorBrowse.setHeight($(window).height() - App.grdVendorBrowse.getY() - (App.grdVendorBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionVendorChange = function (length) {
            App.ButtonSelectVendor.setDisabled(length < 1);
        };

        doFilter = function (filter, VendorID, VendorDesc) {
            filter.fields[0].items.items[0].setValue(VendorID);
            filter.fields[1].items.items[0].setValue(VendorDesc);
        };

        selectVendorBrowse = function (ControlVendorID, ControlVendorDesc, VendorID, VendorDesc)
        {
            /*
            for (i = 0; i < App.grdItemCompare.store.data.items.length; i++)
            {
                var tes = App.grdItemCompare.store.data.items[i].data.ItemID;
            }*/

            var arrItemID = [];
            for (i = 0; i < App.grdItemCompare.getStore().data.length; i++) {
                Item = App.grdItemCompare.store.data.items[i].data.ItemID;
                arrItemID.push(Item);
            }
            /*getDataVendor(arrItemID);*/
            console.log(arrItemID);

            App.WinBrowseVendor.close();
        };

        getDataVendor = function (ItemID) {
            Ext.net.DirectMethod.request(
            {
                url: '@(Url.Action("ReloadParameter", "ItemComparison"))',
                params:
                {
                    ItemID: ItemID
                },
                success: function (result) {
                    var data = result.data;
                    for (var n = 0; n < data.length; n++) {
                        var s = data[n];
                        App.grdItemCompare.store.add(new ModelItemCompare({
                            ItemID: "",
                            ItemDesc: ""
                        }));
                    }
                }
            });
        }
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseVendor")
    .Modal(true)
    .Title(ViewBag.Title)
    .Width(iWindowWidth)
    .Items(
        X.GridPanel()
        .ID("grdVendorBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionVendorChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[VendorVM.Prop.VendorID.Name].ToString() + "', '" + ViewData[VendorVM.Prop.VendorDesc.Name].ToString() + "');";
            oListener.ViewReady.Delay = 1; oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowse", "Vendor"))
                .Reader(X.JsonReader().RootProperty("data"))
            )
            .AutoLoad(ViewData[VendorVM.Prop.VendorID.Name].ToString() == "" && ViewData[VendorVM.Prop.VendorDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.VendorID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(VendorVM.Prop.VendorID.Desc)
            .DataIndex(Model, model => model.VendorID)
            .Flex(1)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(VendorVM.Prop.VendorDesc.Desc)
            .DataIndex(Model, model => model.VendorDesc)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)

@*@using com.SML.Lib.Common
    @using com.SML.BIGTRONS.Enum
    @using com.SML.BIGTRONS.ViewModels
    @model ItemPriceVendorPeriodVM
    @{
        ViewBag.Title = "Item Price Vendor Period";
        var X = Html.X();
        string sPageName = "VendorCompare";
        var iWindowWidth = 650;
        int iGridMinHeight = 250;
        int iBodyPadding = 10;
        string sToolbarPaddingSpec = "0 10 10 0";
        int iPageSize = 30;

        //string sHandler = "selectVendorBrowse('" + ViewData["Control" + ItemVM.Prop.ItemID.Name]
        //+ "', '" + ViewData["Control" + ItemVM.Prop.ItemDesc.Name]
        //+ "', '" + ViewData["Control" + ItemPriceVendorPeriodVM.Prop.VendorDesc.Name]
        //+ "', App.grdVendorCompareBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemVM.Prop.ItemID.Name + "']"
        //+ ", App.grdVendorCompareBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemVM.Prop.ItemDesc.Name + "']"
        //+ ", App.grdVendorCompareBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemPriceVendorPeriodVM.Prop.VendorDesc.Name + "']"
        //+ ", '" + ViewData["ControlGridVendorCompare"] + "');";

        string sHandler = "selectVendorBrowse('" + ViewData["Control" + VendorVM.Prop.VendorID.Name]
    + "', '" + ViewData["Control" + VendorVM.Prop.VendorID.Name]
    + "', '" + ViewData["Control" + ItemPriceVendorPeriodVM.Prop.Amount.Name]
    + "', App.grdVendorCompareBrowse.getRowsValues({selectedOnly:true})[0]['" + VendorVM.Prop.VendorID.Name + "']"
    + ", App.grdVendorCompareBrowse.getRowsValues({selectedOnly:true})[0]['" + VendorVM.Prop.VendorDesc.Name + "']"
    + ", App.grdVendorCompareBrowse.getRowsValues({selectedOnly:true})[0]['" + ItemPriceVendorPeriodVM.Prop.Amount.Name + "']"
    + ", '" + ViewData["ControlGridVendorCompare"] + "');";

        Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, "", true, false, false, Buttons.ButtonList);

        <script>
            $(document).ready(function () {
                setTimeout("resizeGrdVendorCompareBrowse()", 1);
            });

            $(window).resize(function () {
                resizeGrdVendorCompareBrowse();
            });

            resizeGrdVendorCompareBrowse = function () {
                if (App.grdVendorCompareBrowse != null)
                    App.grdVendorCompareBrowse.setHeight($(window).height() - App.grdVendorCompareBrowse.getY() - (App.grdVendorCompareBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
            };

            selectionVendorCompareChange = function (length) {
                App.ButtonSelectVendorCompare.setDisabled(length < 1);
            };

            doFilter = function (filter, uoMID, uoMDesc)
            {
                debugger;
                filter.fields[0].items.items[0].setValue(uoMID);
                filter.fields[1].items.items[0].setValue(uoMDesc);
            };
            selectVendorBrowse = function (ControlVendorID, ControlVendorDesc, ControlAmount,
                VendorID, VendorDesc, Amount, ControlGridVendorCompare)
            {
                if (Ext.getCmp(ControlVendorID) != undefined)
                {
                    Ext.getCmp(ControlVendorID).setValue(VendorID);
                    Ext.getCmp(ControlVendorID).originalValue = VendorID;
                }
                if (Ext.getCmp(ControlVendorDesc) != undefined)
                {
                    Ext.getCmp(ControlVendorDesc).setValue(VendorDesc);
                    Ext.getCmp(ControlVendorDesc).originalValue = VendorDesc;
                }
                if (Ext.getCmp(ControlAmount) != undefined)
                {
                    Ext.getCmp(ControlAmount).setValue(Amount);
                    Ext.getCmp(ControlAmount).originalValue = Amount;
                }
                debugger;
                if (App.grdItemCompare != undefined)
                {
                    for (var i = 0; i < App.grdVendorCompareBrowse.getSelection().length; i++)
                    {
                        App.grdItemCompare.store.add(new ModelItemCompare({
                            VendorID: App.grdVendorCompareBrowse.getSelection()[i].data.VendorID,
                            VendorDesc: App.grdVendorCompareBrowse.getSelection()[i].data.VendorDesc
                        }));
                    }
                    App.ButtonAddVendorComparison.setDisabled(false);
                    App.ButtonDeleteItemComparison.setDisabled(false);
                }
                App.WinBrowseVendorCompare.close();
            }

        </script>
    }
    @(
        X.Window()
        .CloseAction(CloseAction.Destroy)
        .ID("WinBrowseVendorCompare")
        .Modal(true)
        .Title(ViewBag.Title)
        .Width(iWindowWidth)
        .ConstrainHeader(true)
        .Layout(LayoutType.Fit)
        .Items(
            X.GridPanel()
            .ID("grdVendorCompareBrowse")
            .Padding(iBodyPadding)
            .MinHeight(iGridMinHeight)
            .SelectionModel(
                X.RowSelectionModel()
                .Mode(SelectionMode.Multi)
                .AllowDeselect(true)
            )
            .Listeners(oListener =>
            {
                oListener.SelectionChange.Handler = "selectionVendorCompareChange(selected.length)";
                oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[VendorVM.Prop.VendorID.Name].ToString() + "', '" + ViewData[VendorVM.Prop.VendorDesc.Name].ToString() + "');";
                oListener.ViewReady.Delay = 1; oListener.RowDblClick.Handler = sHandler;
            })
            .Store(
                X.StoreForModel()
                .Proxy(
                    X.AjaxProxy()
                    .Url(Url.Action("ReadBrowseVendorCompare", "ItemComparison"))
                    .Reader(X.JsonReader().RootProperty("data"))
                    .ExtraParams(exParam =>
                            exParam.AddRange(new Parameter[]{
                                new Parameter()
                                {
                                    Name = ItemVM.Prop.ItemID.Name,
                                    Value = ViewData["Value" + ItemVM.Prop.ItemID.Name] == null ? string.Empty : ViewData["Value" + ItemVM.Prop.ItemID.Name].ToString(),
                                    Mode = ParameterMode.Value,
                                    Encode = false
                                },new Parameter()
                                {
                                    Name = ItemPriceVM.Prop.RegionID.Name,
                                    Value = ViewData[ItemPriceVM.Prop.RegionID.Name] == null ? string.Empty : ViewData[ItemPriceVM.Prop.RegionID.Name].ToString(),
                                    Mode = ParameterMode.Value,
                                    Encode = false
                                },
                                new Parameter()
                                {
                                    Name = ItemPriceVM.Prop.ProjectID.Name,
                                    Value = ViewData[ItemPriceVM.Prop.ProjectID.Name] == null ? string.Empty : ViewData[ItemPriceVM.Prop.ProjectID.Name].ToString(),
                                    Mode = ParameterMode.Value,
                                    Encode = false
                                },
                                new Parameter()
                                {
                                    Name = ItemPriceVM.Prop.ClusterID.Name,
                                    Value = ViewData[ItemPriceVM.Prop.ClusterID.Name] == null ? string.Empty : ViewData[ItemPriceVM.Prop.ClusterID.Name].ToString(),
                                    Mode = ParameterMode.Value,
                                    Encode = false
                                },
                                new Parameter()
                                {
                                    Name = ItemPriceVM.Prop.UnitTypeID.Name,
                                    Value = ViewData[ItemPriceVM.Prop.UnitTypeID.Name] == null ? string.Empty : ViewData[ItemPriceVM.Prop.UnitTypeID.Name].ToString(),
                                    Mode = ParameterMode.Value,
                                    Encode = false
                                }
                            })
                        )
                )
                .AutoLoad(ViewData[VendorVM.Prop.VendorID.Name].ToString() == "" && ViewData[VendorVM.Prop.VendorDesc.Name].ToString() == "")
                .RemoteSort(true)
                .RemotePaging(true)
                .RemoteFilter(true)
                .PageSize(iPageSize)
            )
            .ColumnModel(
                X.Column()
                .Text(VendorVM.Prop.VendorID.Desc)
                .DataIndex(Model, model => model.VendorID)
                .Flex(1)
                .Items(
                    X.Container()
                    .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                    .Layout(LayoutType.HBox)
                    .Items(
                        X.TextField()
                        .Flex(1)
                        .Listeners(oListener =>
                        {
                            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                        })
                    )
                ),
                X.Column()
                .Text(VendorVM.Prop.VendorDesc.Desc)
                .DataIndex(Model, model => model.VendorDesc)
                .Flex(3)
                //.Hidden(true)
                .Items(
                    X.Container()
                    .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                    .Layout(LayoutType.HBox)
                    .Items(
                        X.TextField()
                        .Flex(1)
                        .Listeners(oListener =>
                        {
                            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                        })
                    )
                )
            //,
            //X.Column()
            //.Text(ItemPriceVendorPeriodVM.Prop.Amount.Desc)
            //.DataIndex(Model, model => model.Amount)
            //.Flex(3)
            //.Items(
            //    X.Container()
            //    .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            //    .Layout(LayoutType.HBox)
            //    .Items(
            //        X.TextField()
            //        .Flex(1)
            //        .Listeners(oListener =>
            //        {
            //            oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
            //        })
            //    )
            //)
            )
            .Plugins(
                X.FilterHeader()
                .Remote(true)
            )
            .TopBar(
                X.Toolbar()
                .PaddingSpec(sToolbarPaddingSpec)
                .Items(
                    btnSelect.Disabled(true).Handler(sHandler)
                )
            )
            .BottomBar(
                X.PagingToolbar()
                    .DisplayInfo(true)
                    .BaseCls("paging")
                    .DisplayMsg("Displaying {0} - {1} of {2}")
                    .EmptyMsg("No records to display")
            )
        )
    )*@
