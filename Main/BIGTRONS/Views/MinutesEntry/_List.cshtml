@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model MinutesEntryVM
@{

    var X = Html.X();
    string sPageName = "Home";
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;
    List<Parameter> oParamList;
    Parameter oParam;

    Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, sPageName, null, null, true, false, false, Buttons.ButtonList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdMinutesEntry.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDetail = global_asax.Button(Buttons.ButtonDetail, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdMinutesEntry.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnUpdate = global_asax.Button(Buttons.ButtonUpdate, sPageName, null, null, true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdMinutesEntry.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, null, true, false, false, null, oParamList, null, "deleteSuccess(true)", "deleteSuccess(false, result.errorMessage)");
    //Button.Builder btnDownload = global_asax.Button(Buttons.ButtonDownload, sPageName, null, null, true, false, false, null, oParamList);
    Button.Builder btnCancel = global_asax.Button(Buttons.ButtonCancel, sPageName, "Cancel", null, true, false, false, null, oParamList);
    Button.Builder btnVerify = global_asax.Button(Buttons.ButtonVerify, sPageName, null, string.Empty, true);
    Button.Builder btnPreview = global_asax.Button(Buttons.ButtonPreview,sPageName, "Preview Mail", string.Empty, true);

    Button.Builder btnDownload = X.Button()
    .ID(Buttons.ButtonDownload + sPageName)
    .Text("Download").DirectEvents(events =>
    {
        events.Click.Url = Url.Action("Download");
        events.Click.IsUpload = true;
        events.Click.ExtraParams.AddRange(oParamList);
    });

    <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdMinutes()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdMinutes();
        });

        resizeGrdMinutes = function () {
            if (App.grdMinutesEntry != null)
                App.grdMinutesEntry.setHeight($(window).height() - App.grdMinutesEntry.getY() - (App.grdMinutesEntry.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionChanges = function (length,e) {
            debugger;
            if(!Ext.isEmpty(e)){
                App.ButtonUpdateHome.setDisabled(e[0].data.StatusID != 0 && length != 0);
                App.ButtonDeleteHome.setDisabled(e[0].data.StatusID != 0 && length != 0);
                App.ButtonVerifyHome.setDisabled(e[0].data.StatusID != 0 && length != 0);
                App.ButtonDownloadHome.setDisabled(e[0].data.StatusID == 99 && length != 0);
            }
            App.ButtonPreviewHome.setDisabled(length != 1);
            App.ButtonDetailHome.setDisabled(length != 1);
        };

        deleteSuccess = function () {
            if (success)
                App.grdMinutesEntry.getStore().reload();
            else
                showError(sTitle, msg);
        };

        reloadGrid = function () {
            App.grdMinutesEntry.store.load();
        };
        showMsgConfirmVerify= function(){
            debugger;
            Ext.Msg.show({
                message: "You're going to verify current Minutes.</br>Do you want to continue?",
                buttons:Ext.MessageBox.YESNO,
                fn: "verifyConfirm"
            });
            return;
        };
        verifyConfirm= function(btn){
            if (btn == "yes") {
                /* */
                Ext.getBody().mask('Loading');
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("Verify", "MinutesEntry"))',
                    params: {
                        Selected: App.grdMinutesEntry.getRowsValues({ selectedOnly: true })[0]
                    },
                    callback:function(){
                        App.grdMinutesEntry.getStore().reload();
                        Ext.getBody().unmask();
                    }
                });
            }
        };

        spreviewNotif = function() {
            var mailNotificationID = App.grdMinutesEntry.getRowsValues({selectedOnly:true})[0].MailNotificationID;
            debugger;
            var w = new Ext.window.Window({
                loader: {
                    url: '/MailNotifications/Preview?MailNotificationID=' + mailNotificationID,
                    text: "Loading...",
                    autoLoad: true,
                    timeout: 60,
                    scripts: true,
                    renderer: 'html'
                }, 
                title: 'Preview',
                frame: true,
                modal: true,
                width: 800,
                height: 500,
                autoScroll: true,
                maximizable: true
            }).show();
           
        };
    </script>
}
@(
    X.GridPanel()
    .ID("grdMinutesEntry")
    .Padding(iBodyPadding)
    .MinHeight(iGridMinHeight)
    .SelectionModel(
        X.RowSelectionModel()
        .Mode(SelectionMode.Single)
        .AllowDeselect(true)
    )
    .Listeners(oListener =>
    {
        oListener.SelectionChange.Handler = "selectionChanges(selected.length,selected)";
    })
    .Store(
        X.StoreForModel()
        .Proxy(
            X.AjaxProxy()
            .Url(Url.Action("Read"))
            .Reader(X.JsonReader().RootProperty("data"))
        )
        .AutoLoad(true)
        .RemoteSort(true)
        .RemotePaging(true)
        .RemoteFilter(true)
        .PageSize(iPageSize)
        .SorterFor(Model, model => model.CreatedDate, Ext.Net.SortDirection.DESC)
    )
    .ColumnModel(
        X.Column()
        .Text(MinutesEntryVM.Prop.ScheduleID.Desc)
        .DataIndex(Model, model => model.ScheduleID)
        .Flex(1)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ).Hidden(true),
        X.Column()
        .Text(MinutesEntryVM.Prop.MinuteEntryID.Desc)
        .DataIndex(Model, model => model.MinuteEntryID)
        .Flex(1)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ).Hidden(true),
        X.Column()
        .Text(MinutesEntryVM.Prop.FPTID.Desc)
        .DataIndex(Model, model => model.FPTID)
        .Hidden(true)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(MinutesEntryVM.Prop.FPTDesc.Desc)
        .DataIndex(Model, model => model.FPTDesc)
        .Flex(3)
        .Hidden(true)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(MinutesEntryVM.Prop.FunctionID.Desc)
        .DataIndex(Model, model => model.FunctionID)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ).Hidden(true),
        X.Column()
        .Text(MinutesEntryVM.Prop.FunctionDesc.Desc)
        .DataIndex(Model, model => model.FunctionDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(MinutesEntryVM.Prop.Subject.Desc)
        .DataIndex(Model, model => model.Subject)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(MinutesEntryVM.Prop.StatusDesc.Desc)
        .DataIndex(Model, model => model.StatusDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
         X.DateColumn()
        .Text(MinutesEntryVM.Prop.CreatedDate.Desc)
        .DataIndex(Model, model => model.CreatedDate)
        .Flex(3)
        .Format(global_asax.DefaultDateTimeFormat)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )
        ),
        X.Column()
        .Text(MinutesEntryVM.Prop.StatusID.Desc)
        .DataIndex(Model, model => model.StatusID)
        .Flex(3).Hidden(true)

        ,
        X.Column()
        .DataIndex(Model, model => model.MailNotificationID)
        .Flex(3).Hidden(true)

        ,
        X.Column()
        .Text(MinutesEntryVM.Prop.NotificationStatusDesc.Desc)
        .DataIndex(Model, model => model.NotificationStatusDesc)
        .Flex(3)

        ,
         X.Column()
        .DataIndex(Model, model => model.TaskID)
        .Flex(3)
        .Hidden(true),
           X.Column()
        .DataIndex(Model, model => model.TaskStatusID)
        .Flex(3)
        .Hidden(true)

    )
    .Plugins(
        X.FilterHeader()
        .Remote(true)
    )
    .TopBar(
        X.Toolbar()
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
            btnAdd,
            btnDetail.Disabled(true),
            btnUpdate.Disabled(true),
            btnDelete.Disabled(true),
            btnDownload.Icon(Icon.DiskDownload).Disabled(true),
            btnVerify.Disabled(true).Handler("showMsgConfirmVerify()"),
            btnPreview.Disabled(true).Handler("spreviewNotif()")
            //btnCancel.Icon(Icon.Cancel).Disabled(true)
        )
    )
    .BottomBar(
        X.PagingToolbar()
        .DisplayInfo(true)
        .BaseCls("paging")
        .DisplayMsg("Displaying {0} - {1} of {2}")
        .EmptyMsg("No records to display")
    )
)