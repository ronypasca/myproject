@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model List<TCMembersVM>
@{
    ViewBag.Title = "TC Member ";
    var X = Html.X();
    string sPageName = "HomeTCMember";
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;

    bool isDisableButton = ViewData[General.EnumDesc(Params.Action)].ToString() != General.EnumDesc(Buttons.ButtonAdd);
    bool isDetailButton = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);

    List<Parameter> oParamList;
    Parameter oParam;

    //oParamList = new List<Parameter>();
    //oParam = new Parameter();
    //oParam = new Parameter("Control" + TCMembersVM.Prop.TCMemberID.Name, TCMembersVM.Prop.DelegateTo.Name, ParameterMode.Value, false);
    //oParamList.Add(oParam);
    //oParam = new Parameter("Control" + TCMembersVM.Prop.EmployeeName.Name, TCMembersVM.Prop.DelegateName.Name, ParameterMode.Value, false);
    //oParamList.Add(oParam);
    //oParam = new Parameter("Filter" + TCMembersVM.Prop.SuperiorID.Name, "App.EmployeeID.getValue()", ParameterMode.Raw, false);
    //oParamList.Add(oParam);
    //Button.Builder btnBrowseDelegate = global_asax.Button(Buttons.ButtonBrowse, "Delegate", "", General.EnumDesc(Buttons.ButtonBrowse), true, false, false, null, oParamList);
    //Button.Builder btnEraseDelegate = global_asax.Button(Buttons.ButtonErase, "Delegate", "", "", true);

    //var hdnTextFieldDelegateTo = X.Hidden().ID(TCMembersVM.Prop.DelegateTo.Name);
    //var hdnTextFieldDelegateName = X.Hidden().ID(TCMembersVM.Prop.DelegateName.Name);

    oParamList = new List<Parameter>();
    oParam = new Parameter();
    oParam = new Parameter("ControlGrdTCMember", "grdTCMember", ParameterMode.Value, false);
    oParamList.Add(oParam);
    oParam = new Parameter("Filter" + TCMembersVM.Prop.PeriodStart.Name, "App.PeriodStart.getValue()", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    oParam = new Parameter("Filter" + TCMembersVM.Prop.PeriodEnd.Name, "App.PeriodEnd.getValue()", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, "BrowseTCMembers", "Add", "../TCMember/" + General.EnumDesc(Buttons.ButtonBrowse), true, false, false, null, oParamList, "beforeAddTCMember");


    Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, string.Empty, true);


    <script>
        var sTitleTCMember = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdTCMember()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdTCMember();
        });

        resizeGrdTCMember = function () {
            if (App.grdTCMember != null)
                App.grdTCMember.updateLayout();
        };

        selectionChangeTCMember = function (length) {
            App.ButtonDeleteHomeTCMember.setDisabled(length < 1);
        };

        deleteSuccess = function () {
            App.grdTCMember.getStore().reload();
        };

        deleteRowTCMember = function()
        {
            showMsgDeleteConfirmTCMember();
        };

        showMsgDeleteConfirmTCMember= function(){
            Ext.Msg.show({
                message: "Are you sure want to delete selected record(s)?",
                buttons:Ext.MessageBox.YESNO,
                fn: "deleteConfirmTCMember"
            });
            return;
        };

        deleteConfirmTCMember= function(btn){
            if (btn == "yes") {
                Ext.net.DirectMethod.request({
                    url: '@(Url.Action("DeleteTCMemberBidOpening", "BidOpening"))',
                    params: {
                        Selected: App.grdTCMember.getRowsValues({ selectedOnly: true })
                    },
                    success: function (result) {
                    },
                    callback:function(){
                        /*App.grdTCMember.getStore().reload();*/

                        App.grdTCMember.getStore().remove(App.grdTCMember.getSelectionModel().getSelection());
                        var record = App.grdItemPriceVendor.getRowsValues({selectedOnly:true})[0];

                    }
                });
            }
        };

        editTCMember = function (editor, e) {

            /*Check Start Date*/
            if(e.field=='@TCMembersVM.Prop.DelegateStartDate.Name'){
                debugger;
                if(e.record.data.DelegateEndDate!== null){
                    if(e.record.data.DelegateEndDate < e.record.data.DelegeteStartDate){
                        debugger;
                        e.record.set('@TCMembersVM.Prop.DelegateStartDate.Name','');
                        return false;
                    }
                }
                else if(duplicateDelegateDate()){
                    e.record.set('@TCMembersVM.Prop.DelegateStartDate.Name','');
                    return false;
                }
                else if(App.grdTCMember.getStore().data.items.length>1)
                {
                    var beforeRow = App.grdTCMember.getStore().data.items[App.grdTCMember.getStore().data.items.length-2];

                    if(beforeRow.data.DelegateStartDate >= e.record.data.DelegateStartDate){
                        e.record.set('@TCMembersVM.Prop.DelegateStartDate.Name','');
                        return false;
                    }
                }


                App.grdTCMember.getStore().sort({ property: '@TCMembersVM.Prop.DelegateStartDate.Name', direction: 'ASC' });
                /*recalculateEndDate();*/

            }

            /*Check End Date*/
            if(e.field=='@TCMembersVM.Prop.DelegateEndDate.Name'){
                if(e.record.data.DelegeteStartDate!== null){
                    if(e.record.data.DelegeteEndDate < e.record.data.DelegeteStartDate){
                        e.record.set('@TCMembersVM.Prop.DelegateEndDate.Name','');
                        return false;
                    }
                }
                else if(App.grdTCMember.getStore().data.items.length>1)
                {
                    var beforeRow = App.grdTCMember.getStore().data.items[App.grdTCMember.getStore().data.items.length-2];
                    if(beforeRow.data.DelegeteStartDate > e.record.data.DelegateEndDate){
                        e.record.set('@TCMembersVM.Prop.DelegateEndDate.Name','');
                        return false;
                    }
                }



            }
            if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
                e.record.commit();
            }
        };

        beforeEditTCMember = function (editor, e) {
            if("@isDetailButton"== "True")
                return false;

            App.grdTCMember.getSelectionModel().select(e.record);
        };

        beforeAddTCMember = function(){
            
            if(Ext.isEmpty(App.PeriodStart.getValue()) || Ext.isEmpty( App.PeriodEnd.getValue())){
                showWarningAlert(sTitleTCMember, "Please fill the Period Start & Period End" );
                
                return false;
            }
        };

        var setDelegateTo = function (rowIndex) {
            debugger;
            var value = App.DelegateTo.getValue();
            if (value != null && value != "") {
                var record = App.grdTCMember.store.getAt(rowIndex);
                record.set('DelegateTo', value);
                record.commit();
                App.DelegateTo.setValue("");
            }
        };

        var setDelegateName = function (rowIndex) {
            debugger;
            var value = App.DelegateName.getValue();
            if (value != null && value != "") {
                var record = App.grdTCMember.store.getAt(rowIndex);
                record.set('DelegateName', value);
                record.commit();
                App.DelegateName.setValue("");
            }
        };


        viewReady = function (grid, record) {
            var store = grid.store;

            store.clearFilter();

            App.ListTCMembersVM.setValue(JSON.stringify(grid.getRowsValues()));

            store.filterBy(function(row, id){
                return row.get('VendorID') === "-";
            });
        };

        recalculateEndDate = function (){
            var tempValidTo;
            var tempValidFrom;
            var tempRecord;
            var rowID = 0;
            App.grdTCMember.getStore().sort({ property: 'DelegateStartDate', direction: 'ASC' });
            var allRecords = App.grdTCMember.getStore().data.items;
            for (var rowKey in allRecords) {
                if (allRecords.hasOwnProperty(rowKey)) {
                    var row = allRecords[rowKey];
                    /*row.set("ValidTo",new Date(9999, 11, 31));
                    row.commit();*/
                    if(rowID>0){

                        /*var compareValidFrom = dateFromJSON(row.data.ValidFrom.valueOf())  > App.grdTCMember.getStore().getAt(rowID-1).data.ValidFrom;
                        */
                        var compareValidTo = App.grdTCMember.getStore().getAt(rowID-1).data.ValidTo>dateFromJSON(row.data.ValidFrom.valueOf());

                        if(compareValidTo)
                        {
                            var record = App.grdTCMember.getStore().getAt(rowID-1);
                            tempValidFrom = dateFromJSON(row.data.ValidFrom.valueOf());
                            tempValidTo = tempValidFrom.setDate(tempValidFrom.getDate() - 1);
                            record.set("DelegateEndDate",new Date(tempValidTo));
                            record.commit();
                        }
                    }
                }
                rowID++;
            }
        };

        duplicateDelegeteTo = function(){
            var store =App.grdItemPriceVendor.getStore();
            var allRecords = store.data.items;
            var rowIdx=0;
            for (var rowKey in allRecords) {
                if (allRecords.hasOwnProperty(rowKey)) {
                    var row = allRecords[rowKey];

                    if (isDuplicatedVendor(store, 'VendorID', row.get("VendorID"), rowIdx)) {
                        if(row["VendorDesc"]==""||row["VendorDesc"] == undefined) showWarningAlert(sTitleTCMember, "cannot duplicate vendor!" );
                        else showWarningAlert(sTitleTCMember, Ext.String.format("{0} has been exist on the list, cannot duplicate vendor!",row.get("VendorDesc")) );

                        return true;
                        break;
                    }
                }
                rowIdx++;
            }

            return false;
        };


        duplicateDelegateDate = function(){
            var store =App.grdTCMember.getStore();
            var allRecords = store.data.items;
            var rowIdx=0;
            for (var rowKey in allRecords) {
                if (allRecords.hasOwnProperty(rowKey)) {
                    var row = allRecords[rowKey];

                    if (isDuplicatedDelegateDate(store, 'DelegateStartDate', row.get("DelegateStartDate"), rowIdx)) {
                        if(row["DelegateStartDate"]==""||row["DelegateStartDate"] == undefined) showWarningAlert(sTitleTCMember, "cannot duplicate Start Date!" );
                        else showWarningAlert(sTitleTCMember, Ext.String.format("{0} has been exist on the list!",row.get("ValidFrom")) );

                        return true;
                        break;
                    }

                    if (isDuplicatedDelegateDate(store, 'DelegateEndDate', row.get("DelegateEndDate"), rowIdx)) {
                        if(row["DelegateEndDate"]==""||row["DelegateEndDate"] == undefined) showWarningAlert(sTitleTCMember, "cannot duplicate End Date!" );
                        else showWarningAlert(sTitleTCMember, Ext.String.format("{0} has been exist on the list!",row.get("ValidFrom")) );

                        return true;
                        break;
                    }
                }
                rowIdx++;
            }

            return false;
        };

        rangeValidateDelegateDate = function(){
            var store =App.grdTCMember.getStore();
            var allRecords = store.data.items;
            var rowIdx=0;
            for (var rowKey in allRecords) {
                if (allRecords.hasOwnProperty(rowKey)) {
                    var row = allRecords[rowKey];

                    if (isRangeValidDelegateDate(store, 'DelegateStartDate','DelegateStartDate', row.get("DelegateStartDate"), rowIdx)) {
                        if(row["DelegateStartDate"]==""||row["DelegateStartDate"] == undefined) showWarningAlert(sTitleTCMember, "Invalid Delegate Start Date!" );
                        else showWarningAlert(sTitleTCMember, Ext.String.format("{0} has been exist on the list!",row.get("DelegateStartDate")) );

                        return true;
                        break;
                    }

                    if (isRangeValidDelegateDate(store, 'DelegateEndDate','DelegateEndDate', row.get("DelegateEndDate"), rowIdx)) {
                        if(row["DelegateEndDate"]==""||row["DelegateEndDate"] == undefined) showWarningAlert(sTitleTCMember, "Invalid Delegate End Date!" );
                        else showWarningAlert(sTitleTCMember, Ext.String.format("{0} has been exist on the list!",row.get("DelegateEndDate")) );

                        return true;
                        break;
                    }
                }
                rowIdx++;
            }

            return false;
        };

        isDuplicatedDelegateDate = function (store, colName, value, rowIndex) {
            var found = false;
            store.each(function (record, idx) {
                if ((idx != rowIndex) && record.data.hasOwnProperty(colName))
                    if (found = (record.data[colName].getTime() == value.getTime()) ? true : false) { return false };
            });
            return found;
        };

        isRangeValidDelegateDate = function (store, colName, _colName,  value, rowIndex) {
            var found = false;
            store.each(function (record, idx) {
                if ((idx != rowIndex) && record.data.hasOwnProperty(colName)&& record.data.hasOwnProperty(_colName))
                    if (found = (record.data[colName].getTime() <= value.getTime() && value.getTime() <= record.data[_colName].getTime() ) ? true : false) { return false };
            });
            return found;
        };

        var eraseDelegate = function (rowIndex) {
            var record = App.grdTCMember.store.getAt(rowIndex);
            record.set("DelegateTo", "");
            record.set("DelegateName", "");
            record.commit();

            App.DelegateTo.clear();
            App.DelegateName.clear();
        };
    </script>
    var grdTCMember = X.GridPanel()
        .ID("grdTCMember")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Single)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            //oListener.ViewReady.Fn = "viewReady";
            oListener.SelectionChange.Handler = (!isDetailButton ? "selectionChangeTCMember(selected.length)" : "");
        })
        .Store(
                X.Store()
                .AutoLoad(true)
                .RemoteSort(false)
                .RemotePaging(true)
                .RemoteFilter(false)
                .PageSize(iPageSize)
                .DataSource(Model)
                .Model(
                    X.Model()
                    .Name("ModelTCMembers")
                    .Fields(
                        X.ModelField().Name(Model, model => model.BPTCBidOpeningID),
                        X.ModelField().Name(Model, model => model.TCMemberID),
                        X.ModelField().Name(Model, model => model.EmployeeID),
                        X.ModelField().Name(Model, model => model.EmployeeName),
                        X.ModelField().Name(Model, model => model.PeriodStart).Type(ModelFieldType.Date),
                        X.ModelField().Name(Model, model => model.PeriodEnd).Type(ModelFieldType.Date)
                    )
                )
            )
        .ColumnModel(
            X.Column()
            .Text(TCMembersVM.Prop.TCMemberID.Desc)
            .DataIndex(Model, model => model.TCMemberID)
            .Flex(3)
            ,
            X.Column()
            .Text(TCMembersVM.Prop.EmployeeID.Desc)
            .DataIndex(Model, model => model.EmployeeID)
            .Flex(3)
            , 
            X.Column()
            .Text(TCMembersVM.Prop.EmployeeName.Desc)
            .DataIndex(Model, model => model.EmployeeName)
            .Flex(3)
            ,
            X.DateColumn()
            .Text(TCMembersVM.Prop.PeriodStart.Desc)
            .DataIndex(Model, model => model.PeriodStart)
            .Flex(3)
            .Format(global_asax.DefaultDateFormat)
            ,
            X.DateColumn()
            .Text(TCMembersVM.Prop.PeriodEnd.Desc)
            .DataIndex(Model, model => model.PeriodEnd)
            .Flex(3)
            .Format(global_asax.DefaultDateFormat)
        )
        .Plugins(
            X.CellEditing()
                .ClicksToEdit(1)
                .Listeners(ls => ls.Edit.Fn = "editTCMember")
                .Listeners(ls => ls.BeforeEdit.Fn = "beforeEditTCMember")
                .ID("rowEditorTCMember")
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnAdd.Disabled(ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail))
                ,
                btnDelete.Disabled(true)
                .Handler("deleteRowTCMember()")


            )
        )
        .BottomBar(
            X.PagingToolbar()
            .DisplayInfo(true)
            .BaseCls("paging")
            .DisplayMsg("Displaying {0} - {1} of {2}")
            .EmptyMsg("No records to display")
        );
}
@(
    X.Panel()
    .ID("pnlGridTCMember")
    .Items(
        //hdnTextFieldDelegateTo.Listeners(ls => ls.Change.Handler = "setDelegateTo(App.grdTCMember.store.indexOf(App.grdTCMember.getSelectionModel().getSelection()[0]))"),
        //hdnTextFieldDelegateName.Listeners(ls => ls.Change.Handler = "setDelegateName(App.grdTCMember.store.indexOf(App.grdTCMember.getSelectionModel().getSelection()[0]))"),
        //hdnTextFieldListTCMember,
        grdTCMember
    )

)