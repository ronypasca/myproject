@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model List<MenuObjectVM>
@{
    ViewBag.Title = "Menu Object";
    var X = Html.X();
    string sPageName = "HomeMenuObject";
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;
    bool isDisableButton = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);
    List<Parameter> oParamList;
    Parameter oParam;

    Button.Builder btnAdd = global_asax.Button(Buttons.ButtonAdd, sPageName, null, General.EnumDesc(Buttons.ButtonAdd) + "MenuObject", true, false, false, Buttons.ButtonList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdMenuObject.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnDetail = global_asax.Button(Buttons.ButtonDetail, sPageName, null, General.EnumDesc(Buttons.ButtonDetail) + "MenuObject", true, false, false, Buttons.ButtonList, oParamList);

    oParamList = new List<Parameter>();
    oParam = new Parameter(General.EnumDesc(Params.Selected), "App.grdMenuObject.getRowsValues({selectedOnly:true})[0]", ParameterMode.Raw, true);
    oParamList.Add(oParam);
    Button.Builder btnUpdate = global_asax.Button(Buttons.ButtonUpdate, sPageName, null, General.EnumDesc(Buttons.ButtonUpdate) + "MenuObject", true, false, false, Buttons.ButtonList, oParamList);

    
    Button.Builder btnDelete = global_asax.Button(Buttons.ButtonDelete, sPageName, null, General.EnumDesc(Buttons.ButtonDelete) + "MenuObject", true, false,false,null,null,null,"deleteRow()");


    <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdMenuObject()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdMenuObject();
        });

        resizeGrdMenuObject = function () {
            if (App.grdMenuObject != null)
                App.grdMenuObject.updateLayout();
                /*App.grdMenuObject.setHeight($(window).height() - App.grdMenuObject.getY() - (App.grdMenuObject.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());*/
        };

        selectionChangeMenuObject = function (length) {
            App.ButtonDetailHomeMenuObject.setDisabled(length != 1);
            App.ButtonUpdateHomeMenuObject.setDisabled(length != 1);
            App.ButtonDeleteHomeMenuObject.setDisabled(length < 1);
        };

        deleteSuccess = function () {
            App.grdMenuObject.getStore().reload();
        };

        deleteRow = function()
        {
            App.grdMenuObject.getStore().remove(App.grdMenuObject.getSelectionModel().getSelection());
            recalculateValidTo();
        };
       
    </script>
}
@(
    X.GridPanel()
    .ID("grdMenuObject")
    .Padding(iBodyPadding)
    .MinHeight(iGridMinHeight)
    .SelectionModel(
        X.RowSelectionModel()
        .Mode(SelectionMode.Multi)
        .AllowDeselect(true)
    )
    .Listeners(oListener =>
    {
        oListener.SelectionChange.Handler = (!isDisableButton ? "selectionChangeMenuObject(selected.length)" : "");
    })
    .Store(
            X.Store()
            .AutoLoad(true)
            .RemoteSort(false)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .DataSource(Model)
            .Model(
                X.Model()
                .Name("ModelMenuObject")
                .Fields(
                    X.ModelField().Name(Model, model => model.ObjectID),
                    X.ModelField().Name(Model, model => model.ObjectDesc),
                    X.ModelField().Name(Model, model => model.ObjectLongDesc)
                )
            )
        )
    .ColumnModel(
        X.Column()
        .Text(MenuObjectVM.Prop.ObjectID.Desc)
        .DataIndex(Model, model => model.ObjectID)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )),
        X.Column()
        .Text(MenuObjectVM.Prop.ObjectDesc.Desc)
        .DataIndex(Model, model => model.ObjectDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            )),
        X.Column()
        .Text(MenuObjectVM.Prop.ObjectLongDesc.Desc)
        .DataIndex(Model, model => model.ObjectLongDesc)
        .Flex(3)
        .Items(
            X.Container()
            .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
            .Layout(LayoutType.HBox)
            .Items(
                X.TextField()
                .Flex(1)
                .Listeners(oListener =>
                {
                    oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                })
            ))
    )
    .Plugins(
        X.FilterHeader()
        .Remote(false)
    )
    .TopBar(
        X.Toolbar()
        .PaddingSpec(sToolbarPaddingSpec)
        .Items(
            btnAdd.Disabled(isDisableButton),
            btnDetail.Disabled(true),
            btnUpdate.Disabled(true),
            btnDelete.Disabled(true)
            .Handler("deleteRow()")
            
           
        )
    )
    .BottomBar(
        X.PagingToolbar()
        .DisplayInfo(true)
        .BaseCls("paging")
        .DisplayMsg("Displaying {0} - {1} of {2}")
        .EmptyMsg("No records to display")
    )
)