@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model List<VendorVM>
@{
                /**/

                ViewBag.Title = "Menu Action";
                var X = Html.X();
                int iGridMinHeight = 150;
                int iBodyPadding = 10;
                int iPageSize = 10;
                bool isDisableButton = ViewData[General.EnumDesc(Params.Action)].ToString() == General.EnumDesc(Buttons.ButtonDetail);

                <script>
        var sTitle = @Html.Raw(Json.Encode(ViewBag.Title));
        $(document).ready(function () {
            setTimeout("resizeGrdMenuAction()", 1);
        });

        $(window).resize(function () {
            resizeContainer();
            resizeGrdMenuAction();
        });

        resizeGrdMenuAction = function () {
            if (App.grdMenuAction != null)
                App.grdMenuAction.updateLayout();
            /*App.grdMenuAction.setHeight($(window).height() - App.grdMenuAction.getY() - (App.grdMenuAction.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());*/
        };

        selectionChangeMenuAction = function (grid,record) {
            App.grdMenuAction.getSelectionModel().select(record);
        };

        var editMenuAction = function (editor, e) {
            if (!(e.value === e.originalValue || (Ext.isDate(e.value) && Ext.Date.isEqual(e.value, e.originalValue)))) {
                e.record.commit();
            }
        };

        afterRenderMenuAction = function(grid){
            var me = this;
            grid.store.on('load', function(){
                var data = me.getStore().data.items;
                var recs = [];
                Ext.each(data, function(item, index){
                    if (item.data.Checked) {
                        recs.push(item);
                    }
                });
                me.getSelectionModel().select(recs);
            })
        };

        viewReadyMenuAction= function(grid){
            grid.getStore().load();
        };


        beforeSelectMenuAction = function (grid, record, index, eOpts) {
            console.log(App.grdMenuAction.getSelectionModel());
            if("@isDisableButton" == "True"){
                if(!record.get("Checked") && record.get("ActionDesc")!=""){
                    grid.getStore().load();
                }

            }
        };


                </script>
}
@(

                       
                                X.GridPanel()
                                .ID("grdBudgetPlanBidOpening")
                                .Padding(iBodyPadding)
                                .MinHeight(iGridMinHeight)
                                .SelectionModel(
                                    X.CheckboxSelectionModel()
                                    .Mode(SelectionMode.Multi)
                                    .AllowDeselect(true)
                                )
                                 //.Listeners(oListener =>
                                 //{
                                 //    oListener.SelectionChange.Handler = "selectionChange(selected.length)";
                                 //})
                                 .Store(
                                    X.StoreForModel()
                                    .Proxy(
                                        X.AjaxProxy()
                                        .Url(Url.Action("Vendor"))
                                        .Reader(X.JsonReader().RootProperty("data"))
                                    )
                                    .AutoLoad(true)
                                    .RemoteSort(false)
                                    .RemotePaging(false)
                                    .RemoteFilter(false)
                                    .PageSize(iPageSize)

                                )
                                .BottomBar(
                                    X.PagingToolbar()
                                    .DisplayInfo(true)
                                    .BaseCls("paging")
                                    .DisplayMsg("Displaying {0} - {1} of {2}")
                                    .EmptyMsg("No records to display")
                                )
                                .ColumnModel(
                                    X.Column()
                                    .Text(VendorVM.Prop.VendorID.Desc)
                                    .DataIndex(Model, model => model.VendorID)
                                    .Flex(1)
                                    .Items(
                                        //X.Container()
                                        //.CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                                        //.Layout(LayoutType.HBox)
                                        //.Items(
                                        //    X.TextField()
                                        //    .Flex(1)
                                        //    .Listeners(oListener =>
                                        //    {
                                        //        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                                        //    })
                                        //)
                                        X.Container()
                                        .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                                        .Layout(LayoutType.HBox)
                                        .Items(
                                            X.TextField()
                                            .Flex(1)
                                            .Listeners(oListener =>
                                            {
                                                oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                                            })
                                        )
                                    ),
                                    X.Column()
                                    .Text(VendorVM.Prop.VendorDesc.Desc)
                                    .DataIndex(Model, model => model.VendorDesc)
                                    .Flex(3)
                                    .Items(
                                        X.Container()
                                        .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                                        .Layout(LayoutType.HBox)
                                        .Items(
                                            X.TextField()
                                            .Flex(1)
                                            .Listeners(oListener =>
                                            {
                                                oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                                            })
                                        )
                                    )

                        
                    
)
)