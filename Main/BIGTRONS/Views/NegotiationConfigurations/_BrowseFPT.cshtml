@using com.SML.Lib.Common
@using com.SML.BIGTRONS.Enum
@using com.SML.BIGTRONS.ViewModels
@model FPTVM
@{
    
    var X = Html.X();
    string sPageName = "FPT";
    var iWindowWidth = 650;
    int iGridMinHeight = 250;
    int iBodyPadding = 10;
    string sToolbarPaddingSpec = "0 10 10 0";
    int iPageSize = 30;
    string sHandler = "selectFPTBrowse('" + ViewData["Control" + FPTVM.Prop.FPTID.Name]
        + "', '" + ViewData["ControlFPTDesc"]
        + "', '" + ViewData["ControlBUnit"]
        + "', '" + ViewData["ControlBUnitDesc"]
        + "', '" + ViewData["ControlDivision"]
        + "', '" + ViewData["ControlProject"]
        + "', '" + ViewData["ControlClusterID"]
        + "', '" + ViewData["OldValueFPTID"]
        + "', App.grdFPTBrowse.getRowsValues({selectedOnly:true})[0]['" + FPTVM.Prop.FPTID.Name + "']"
        + ", App.grdFPTBrowse.getRowsValues({selectedOnly:true})[0]['" + FPTVM.Prop.Descriptions.Name + "']"
        + ", App.grdFPTBrowse.getRowsValues({selectedOnly:true})[0]['" + FPTVM.Prop.BusinessUnitID.Name + "']"
        + ", App.grdFPTBrowse.getRowsValues({selectedOnly:true})[0]['" + FPTVM.Prop.BusinessUnitDesc.Name + "']"
        + ", App.grdFPTBrowse.getRowsValues({selectedOnly:true})[0]['" + FPTVM.Prop.DivisionID.Name + "']"
        + ", App.grdFPTBrowse.getRowsValues({selectedOnly:true})[0]['" + FPTVM.Prop.ProjectID.Name + "']"
        + ", App.grdFPTBrowse.getRowsValues({selectedOnly:true})[0]['" + FPTVM.Prop.ClusterID.Name + "']"
        + ");";

    Button.Builder btnSelect = global_asax.Button(Buttons.ButtonSelect, sPageName, null, "", true, false, false, Buttons.ButtonList);

    <script>
        $(document).ready(function () {
            setTimeout("resizeGrdFPTBrowse()", 1);
        });

        $(window).resize(function () {
            resizeGrdFPTBrowse();
        });

        resizeGrdFPTBrowse = function () {
            if (App.grdFPTBrowse != null)
                App.grdFPTBrowse.setHeight($(window).height() - App.grdFPTBrowse.getY() - (App.grdFPTBrowse.getBorderPadding().beforeY * 2 - 5 + 2) - $("footer").height());
        };

        selectionFPTChange = function (length) {
            App.ButtonSelectFPT.setDisabled(length < 1);
        };

        doFilter = function (filter, DeviationTypeID, Descriptions) {
            filter.fields[0].items.items[0].setValue(DeviationTypeID);
            filter.fields[1].items.items[0].setValue(Descriptions);
        };

        selectFPTBrowse = function (ControlFPTID, ControlFPTDesc, ControlBUnit, ControlBUnitDesc, ControlDivision, ControlProject, ControlClusterID, OldValueFPTD, FPTID, FPTDesc, BUnit, BUnitDesc, Division, Project, ClusterID) {
            if (Ext.getCmp(ControlFPTID) != undefined) {
                Ext.getCmp(ControlFPTID).setValue(FPTID);
                Ext.getCmp(ControlFPTID).originalValue = FPTID;
            }
            debugger;
            
            if (Ext.getCmp(ControlFPTDesc) != undefined) {
                Ext.getCmp(ControlFPTDesc).setValue(FPTDesc);
                Ext.getCmp(ControlFPTDesc).originalValue = FPTDesc;
            }
            if (Ext.getCmp(ControlBUnit) != undefined) {
                Ext.getCmp(ControlBUnit).setValue(BUnit);
                Ext.getCmp(ControlBUnit).originalValue = BUnit;
            }
            if (Ext.getCmp(ControlBUnitDesc) != undefined) {
                Ext.getCmp(ControlBUnitDesc).setValue(BUnitDesc);
                Ext.getCmp(ControlBUnitDesc).originalValue = BUnitDesc;
            }
            if (Ext.getCmp(ControlDivision) != undefined) {
                Ext.getCmp(ControlDivision).setValue(Division);
                Ext.getCmp(ControlDivision).originalValue = Division;
            }
            if (Ext.getCmp(ControlProject) != undefined) {
                Ext.getCmp(ControlProject).setValue(Project);
                Ext.getCmp(ControlProject).originalValue = Project;
            }
            if (Ext.getCmp(ControlClusterID) != undefined) {
                Ext.getCmp(ControlClusterID).setValue(ClusterID);
                Ext.getCmp(ControlClusterID).originalValue = ClusterID;
            }
            Ext.net.DirectMethod.request({
                url: '@(Url.Action("ReloadProjectList", "NegotiationConfigurations"))',
                params: {
                    Action: "Add",
                    BUnit: BUnit,
                    Division: Division,
                    Project: Project,
                    ClusterID: ClusterID
                },
                success: function (result) {
                    var data = result.data;
                    App.treePanelNegoConfig.store.root.removeAll();
                    App.treePanelNegoConfig.setRootNode(data);
                    TCChange("FPT", "", OldValueFPTD);
                    /*App.grdTCMember.store.removeAll();*/
                },
                failure: function () { }
            });
            App.WinBrowseFPT.close();
        };
    </script>
}
@(
    X.Window()
    .CloseAction(CloseAction.Destroy)
    .ID("WinBrowseFPT")
    .Modal(true)
    .Title(ViewBag.Title)

    //.Layout(LayoutType.HBox)
    .MinWidth(800)
    .Items(
        X.GridPanel()
        .ID("grdFPTBrowse")
        .Padding(iBodyPadding)
        .MinHeight(iGridMinHeight)
        //.Layout(LayoutType.HBox)
        .SelectionModel(
            X.RowSelectionModel()
            .Mode(SelectionMode.Multi)
            .AllowDeselect(true)
        )
        .Listeners(oListener =>
        {
            oListener.SelectionChange.Handler = "selectionFPTChange(selected.length)";
            oListener.ViewReady.Handler = "doFilter(this.filterHeader, '" + ViewData[FPTVM.Prop.FPTID.Name].ToString() + "', '" + ViewData[NegotiationConfigurationsVM.Prop.FPTDesc.Name].ToString() + "');";
            oListener.ViewReady.Delay = 1;
            oListener.RowDblClick.Handler = sHandler;
        })
        .Store(
            X.StoreForModel()
            .Proxy(
                X.AjaxProxy()
                .Url(Url.Action("ReadBrowseFPT", "NegotiationConfigurations"))
                .Reader(X.JsonReader().RootProperty("data"))
            //.ExtraParams(exParam =>
            //        exParam.AddRange(new Parameter[]{
            //            new Parameter()
            //            {
            //                Name = "FPTID_",
            //                Value = ViewData["FPTID_"].ToString(),
            //                Mode = ParameterMode.Value,
            //                Encode = false
            //            }
            //        })
            //    )
            )
            .AutoLoad(ViewData[FPTVM.Prop.FPTID.Name].ToString() == "" && ViewData[NegotiationConfigurationsVM.Prop.FPTDesc.Name].ToString() == "")
            .RemoteSort(true)
            .RemotePaging(true)
            .RemoteFilter(true)
            .PageSize(iPageSize)
            .SorterFor(Model, model => model.FPTID, Ext.Net.SortDirection.ASC)
        )
        .ColumnModel(
            X.Column()
            .Text(FPTVM.Prop.FPTID.Desc)
            .DataIndex(Model, model => model.FPTID)
            .Flex(1).Layout(LayoutType.HBox)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.Fit)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(FPTVM.Prop.BusinessUnitID.Desc)
            .DataIndex(Model, model => model.BusinessUnitID)
            .Flex(1).Layout(LayoutType.Fit).Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.Fit)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(FPTVM.Prop.BusinessUnitDesc.Desc)
            .DataIndex(Model, model => model.BusinessUnitDesc)
            .Flex(1)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(FPTVM.Prop.DivisionID.Desc)
            .DataIndex(Model, model => model.DivisionID)
            .Flex(1)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ).Hidden(true),
            X.Column()
            .Text(FPTVM.Prop.DivisionDesc.Desc)
            .DataIndex(Model, model => model.DivisionDesc)
            .Flex(1).Layout(LayoutType.Fit).Hidden(false)
            ,
            X.Column()
            .Text(FPTVM.Prop.ProjectID.Desc)
            .DataIndex(Model, model => model.ProjectID)
            .Flex(1).Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(FPTVM.Prop.ProjectDesc.Desc)
            .DataIndex(Model, model => model.ProjectDesc)
            .Flex(1).Layout(LayoutType.Fit).Hidden(false)
            ,
            X.Column()
            .Text(FPTVM.Prop.ClusterID.Desc)
            .DataIndex(Model, model => model.ClusterID)
            .Flex(1).Hidden(true)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            ),
            X.Column()
            .Text(FPTVM.Prop.ClusterDesc.Desc)
            .DataIndex(Model, model => model.ClusterDesc)
            .Flex(1).Layout(LayoutType.Fit).Hidden(false)
            ,
            X.Column()
            .Text(FPTVM.Prop.Descriptions.Desc)
            .DataIndex(Model, model => model.Descriptions)
            .Flex(3)
            .Items(
                X.Container()
                .CustomConfig(config => config.Add(new ConfigItem("getValue", "getValueText", ParameterMode.Raw)))
                .Layout(LayoutType.HBox)
                .Items(
                    X.TextField()
                    .Flex(1)
                    .Listeners(oListener =>
                    {
                        oListener.Change.Handler = "this.up('grid').filterHeader.onFieldChange(this.up('container'));";
                    })
                )
            )
        )
        .Plugins(
            X.FilterHeader()
            .Remote(true)
        )
        .TopBar(
            X.Toolbar()
            .PaddingSpec(sToolbarPaddingSpec)
            .Items(
                btnSelect.Disabled(true).Handler(sHandler)
            )
        )
        .BottomBar(
            X.PagingToolbar()
                .DisplayInfo(true)
                .BaseCls("paging")
                .DisplayMsg("Displaying {0} - {1} of {2}")
                .EmptyMsg("No records to display")
        )
    )
)